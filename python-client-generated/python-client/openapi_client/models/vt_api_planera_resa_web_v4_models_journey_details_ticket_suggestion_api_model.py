# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.vt_api_planera_resa_core_models_time_limitation import VTApiPlaneraResaCoreModelsTimeLimitation
from openapi_client.models.vt_api_planera_resa_core_models_traveller_category import VTApiPlaneraResaCoreModelsTravellerCategory
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_channel_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsChannelApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_punch_configuration_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_time_validity_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_zone_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsZoneApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_product_instance_type_api_model import VTApiPlaneraResaWebV4ModelsProductInstanceTypeApiModel

class VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel(BaseModel):
    """
    Information about a ticket suggestion.  # noqa: E501
    """
    product_id: Optional[StrictInt] = Field(None, alias="productId", description="The product id.")
    product_name: Optional[StrictStr] = Field(None, alias="productName", description="The product name.")
    product_type: Optional[StrictInt] = Field(None, alias="productType", description="The product type.")
    traveller_category: Optional[VTApiPlaneraResaCoreModelsTravellerCategory] = Field(None, alias="travellerCategory")
    price_in_sek: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="priceInSek", description="The product price in SEK.")
    time_validity: Optional[VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel] = Field(None, alias="timeValidity")
    time_limitation: Optional[VTApiPlaneraResaCoreModelsTimeLimitation] = Field(None, alias="timeLimitation")
    sale_channels: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsChannelApiModel)] = Field(None, alias="saleChannels", description="A list of the channels that sell the product.")
    valid_zones: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsZoneApiModel)] = Field(None, alias="validZones", description="A list of the valid zones for the ticket.")
    product_instance_type: Optional[VTApiPlaneraResaWebV4ModelsProductInstanceTypeApiModel] = Field(None, alias="productInstanceType")
    punch_configuration: Optional[VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationApiModel] = Field(None, alias="punchConfiguration")
    offer_specification: Optional[StrictStr] = Field(None, alias="offerSpecification", description="Used to get ticket offer.")
    __properties = ["productId", "productName", "productType", "travellerCategory", "priceInSek", "timeValidity", "timeLimitation", "saleChannels", "validZones", "productInstanceType", "punchConfiguration", "offerSpecification"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of time_validity
        if self.time_validity:
            _dict['timeValidity'] = self.time_validity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sale_channels (list)
        _items = []
        if self.sale_channels:
            for _item in self.sale_channels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['saleChannels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in valid_zones (list)
        _items = []
        if self.valid_zones:
            for _item in self.valid_zones:
                if _item:
                    _items.append(_item.to_dict())
            _dict['validZones'] = _items
        # override the default output from pydantic by calling `to_dict()` of punch_configuration
        if self.punch_configuration:
            _dict['punchConfiguration'] = self.punch_configuration.to_dict()
        # set to None if product_name (nullable) is None
        # and __fields_set__ contains the field
        if self.product_name is None and "product_name" in self.__fields_set__:
            _dict['productName'] = None

        # set to None if sale_channels (nullable) is None
        # and __fields_set__ contains the field
        if self.sale_channels is None and "sale_channels" in self.__fields_set__:
            _dict['saleChannels'] = None

        # set to None if valid_zones (nullable) is None
        # and __fields_set__ contains the field
        if self.valid_zones is None and "valid_zones" in self.__fields_set__:
            _dict['validZones'] = None

        # set to None if offer_specification (nullable) is None
        # and __fields_set__ contains the field
        if self.offer_specification is None and "offer_specification" in self.__fields_set__:
            _dict['offerSpecification'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel.parse_obj({
            "product_id": obj.get("productId"),
            "product_name": obj.get("productName"),
            "product_type": obj.get("productType"),
            "traveller_category": obj.get("travellerCategory"),
            "price_in_sek": obj.get("priceInSek"),
            "time_validity": VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel.from_dict(obj.get("timeValidity")) if obj.get("timeValidity") is not None else None,
            "time_limitation": obj.get("timeLimitation"),
            "sale_channels": [VTApiPlaneraResaWebV4ModelsJourneyDetailsChannelApiModel.from_dict(_item) for _item in obj.get("saleChannels")] if obj.get("saleChannels") is not None else None,
            "valid_zones": [VTApiPlaneraResaWebV4ModelsJourneyDetailsZoneApiModel.from_dict(_item) for _item in obj.get("validZones")] if obj.get("validZones") is not None else None,
            "product_instance_type": obj.get("productInstanceType"),
            "punch_configuration": VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationApiModel.from_dict(obj.get("punchConfiguration")) if obj.get("punchConfiguration") is not None else None,
            "offer_specification": obj.get("offerSpecification")
        })
        return _obj


