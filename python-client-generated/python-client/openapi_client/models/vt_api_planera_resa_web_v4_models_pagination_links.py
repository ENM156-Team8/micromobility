# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class VTApiPlaneraResaWebV4ModelsPaginationLinks(BaseModel):
    """
    Pagination navigation links.  # noqa: E501
    """
    previous: Optional[StrictStr] = Field(None, description="Link to the previous results page, if available, otherwise null.")
    next: Optional[StrictStr] = Field(None, description="Link to the next results page, if available, otherwise null. Not guaranteed to give a result if called.")
    current: Optional[StrictStr] = Field(None, description="Link to the current results page, if available, otherwise null. Not guaranteed to give a result if called.")
    __properties = ["previous", "next", "current"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsPaginationLinks:
        """Create an instance of VTApiPlaneraResaWebV4ModelsPaginationLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if previous (nullable) is None
        # and __fields_set__ contains the field
        if self.previous is None and "previous" in self.__fields_set__:
            _dict['previous'] = None

        # set to None if next (nullable) is None
        # and __fields_set__ contains the field
        if self.next is None and "next" in self.__fields_set__:
            _dict['next'] = None

        # set to None if current (nullable) is None
        # and __fields_set__ contains the field
        if self.current is None and "current" in self.__fields_set__:
            _dict['current'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsPaginationLinks:
        """Create an instance of VTApiPlaneraResaWebV4ModelsPaginationLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsPaginationLinks.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsPaginationLinks.parse_obj({
            "previous": obj.get("previous"),
            "next": obj.get("next"),
            "current": obj.get("current")
        })
        return _obj


