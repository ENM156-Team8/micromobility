# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, constr
from openapi_client.models.vt_api_planera_resa_core_models_location_type import VTApiPlaneraResaCoreModelsLocationType
from openapi_client.models.vt_api_planera_resa_core_models_note import VTApiPlaneraResaCoreModelsNote

class VTApiPlaneraResaWebV4ModelsJourneysLinkEndpointApiModel(BaseModel):
    """
    Information about an endpoint on an access link.  # noqa: E501
    """
    gid: Optional[StrictStr] = Field(None, description="The 16-digit Västtrafik gid.")
    name: constr(strict=True, min_length=1) = Field(..., description="The location name.")
    location_type: VTApiPlaneraResaCoreModelsLocationType = Field(..., alias="locationType")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The WGS84 latitude of the location.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The WGS84 longitude of the location.")
    planned_time: constr(strict=True, min_length=1) = Field(..., alias="plannedTime", description="The planned time in RFC 3339 format.")
    estimated_time: Optional[StrictStr] = Field(None, alias="estimatedTime", description="The estimated time in RFC 3339 format.")
    estimated_otherwise_planned_time: Optional[StrictStr] = Field(None, alias="estimatedOtherwisePlannedTime", description="The best known time of the link in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.")
    notes: Optional[conlist(VTApiPlaneraResaCoreModelsNote)] = Field(None, description="An ordered list (most important first) of notes related to the end point.")
    __properties = ["gid", "name", "locationType", "latitude", "longitude", "plannedTime", "estimatedTime", "estimatedOtherwisePlannedTime", "notes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneysLinkEndpointApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysLinkEndpointApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "estimated_otherwise_planned_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        # set to None if gid (nullable) is None
        # and __fields_set__ contains the field
        if self.gid is None and "gid" in self.__fields_set__:
            _dict['gid'] = None

        # set to None if latitude (nullable) is None
        # and __fields_set__ contains the field
        if self.latitude is None and "latitude" in self.__fields_set__:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and __fields_set__ contains the field
        if self.longitude is None and "longitude" in self.__fields_set__:
            _dict['longitude'] = None

        # set to None if estimated_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_time is None and "estimated_time" in self.__fields_set__:
            _dict['estimatedTime'] = None

        # set to None if estimated_otherwise_planned_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_otherwise_planned_time is None and "estimated_otherwise_planned_time" in self.__fields_set__:
            _dict['estimatedOtherwisePlannedTime'] = None

        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneysLinkEndpointApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysLinkEndpointApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneysLinkEndpointApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneysLinkEndpointApiModel.parse_obj({
            "gid": obj.get("gid"),
            "name": obj.get("name"),
            "location_type": obj.get("locationType"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "planned_time": obj.get("plannedTime"),
            "estimated_time": obj.get("estimatedTime"),
            "estimated_otherwise_planned_time": obj.get("estimatedOtherwisePlannedTime"),
            "notes": [VTApiPlaneraResaCoreModelsNote.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None
        })
        return _obj


