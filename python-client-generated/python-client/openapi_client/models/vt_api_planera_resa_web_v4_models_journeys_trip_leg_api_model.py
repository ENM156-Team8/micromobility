# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.vt_api_planera_resa_core_models_note import VTApiPlaneraResaCoreModelsNote
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_call_api_model import VTApiPlaneraResaWebV4ModelsJourneysCallApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_service_journey_api_model import VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_occupancy_information_api_model import VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel

class VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel(BaseModel):
    """
    Information about a journey trip leg.  # noqa: E501
    """
    origin: VTApiPlaneraResaWebV4ModelsJourneysCallApiModel = Field(...)
    destination: VTApiPlaneraResaWebV4ModelsJourneysCallApiModel = Field(...)
    is_cancelled: StrictBool = Field(..., alias="isCancelled", description="Flag indicating if the trip leg is cancelled.")
    is_part_cancelled: Optional[StrictBool] = Field(None, alias="isPartCancelled", description="Flag indicating if the trip leg is partially cancelled.")
    service_journey: Optional[VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel] = Field(None, alias="serviceJourney")
    notes: Optional[conlist(VTApiPlaneraResaCoreModelsNote)] = Field(None, description="An ordered list (most important first) of notes related to the trip leg.")
    estimated_distance_in_meters: Optional[StrictInt] = Field(None, alias="estimatedDistanceInMeters", description="Estimated distance in meters. Only for transport mode Walk.")
    planned_connecting_time_in_minutes: Optional[StrictInt] = Field(None, alias="plannedConnectingTimeInMinutes", description="The planned (according to timetable) connecting time in minutes relative to  the previous public transport trip leg (if any).")
    estimated_connecting_time_in_minutes: Optional[StrictInt] = Field(None, alias="estimatedConnectingTimeInMinutes", description="The estimated (according to real-time data) connecting time in minutes relative to  the previous public transport trip leg (if any).")
    is_risk_of_missing_connection: Optional[StrictBool] = Field(None, alias="isRiskOfMissingConnection", description="Flag indicating that there is less than 5 minutes margin between arriving at the  origin stop point and the departure from that stop point.")
    planned_departure_time: Optional[StrictStr] = Field(None, alias="plannedDepartureTime", description="The planned departure time in RFC 3339 format.")
    planned_arrival_time: Optional[StrictStr] = Field(None, alias="plannedArrivalTime", description="The planned arrival time in RFC 3339 format.")
    planned_duration_in_minutes: Optional[StrictInt] = Field(None, alias="plannedDurationInMinutes", description="The planned duration in minutes.")
    estimated_departure_time: Optional[StrictStr] = Field(None, alias="estimatedDepartureTime", description="The estimated departure time in RFC 3339 format, if available.")
    estimated_arrival_time: Optional[StrictStr] = Field(None, alias="estimatedArrivalTime", description="The estimated arrival time in RFC 3339 format, if available.")
    estimated_duration_in_minutes: Optional[StrictInt] = Field(None, alias="estimatedDurationInMinutes", description="The estimated duration in minutes, if available.")
    estimated_otherwise_planned_arrival_time: Optional[StrictStr] = Field(None, alias="estimatedOtherwisePlannedArrivalTime", description="The best known time of the arrival in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.")
    estimated_otherwise_planned_departure_time: Optional[StrictStr] = Field(None, alias="estimatedOtherwisePlannedDepartureTime", description="The best known time of the departure in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.")
    occupancy: Optional[VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel] = None
    journey_leg_index: Optional[StrictInt] = Field(None, alias="journeyLegIndex", description="Index of Leg in Journey")
    __properties = ["origin", "destination", "isCancelled", "isPartCancelled", "serviceJourney", "notes", "estimatedDistanceInMeters", "plannedConnectingTimeInMinutes", "estimatedConnectingTimeInMinutes", "isRiskOfMissingConnection", "plannedDepartureTime", "plannedArrivalTime", "plannedDurationInMinutes", "estimatedDepartureTime", "estimatedArrivalTime", "estimatedDurationInMinutes", "estimatedOtherwisePlannedArrivalTime", "estimatedOtherwisePlannedDepartureTime", "occupancy", "journeyLegIndex"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "estimated_otherwise_planned_arrival_time",
                            "estimated_otherwise_planned_departure_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of origin
        if self.origin:
            _dict['origin'] = self.origin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_journey
        if self.service_journey:
            _dict['serviceJourney'] = self.service_journey.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        # override the default output from pydantic by calling `to_dict()` of occupancy
        if self.occupancy:
            _dict['occupancy'] = self.occupancy.to_dict()
        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict['notes'] = None

        # set to None if estimated_distance_in_meters (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_distance_in_meters is None and "estimated_distance_in_meters" in self.__fields_set__:
            _dict['estimatedDistanceInMeters'] = None

        # set to None if planned_connecting_time_in_minutes (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_connecting_time_in_minutes is None and "planned_connecting_time_in_minutes" in self.__fields_set__:
            _dict['plannedConnectingTimeInMinutes'] = None

        # set to None if estimated_connecting_time_in_minutes (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_connecting_time_in_minutes is None and "estimated_connecting_time_in_minutes" in self.__fields_set__:
            _dict['estimatedConnectingTimeInMinutes'] = None

        # set to None if is_risk_of_missing_connection (nullable) is None
        # and __fields_set__ contains the field
        if self.is_risk_of_missing_connection is None and "is_risk_of_missing_connection" in self.__fields_set__:
            _dict['isRiskOfMissingConnection'] = None

        # set to None if planned_departure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_departure_time is None and "planned_departure_time" in self.__fields_set__:
            _dict['plannedDepartureTime'] = None

        # set to None if planned_arrival_time (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_arrival_time is None and "planned_arrival_time" in self.__fields_set__:
            _dict['plannedArrivalTime'] = None

        # set to None if planned_duration_in_minutes (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_duration_in_minutes is None and "planned_duration_in_minutes" in self.__fields_set__:
            _dict['plannedDurationInMinutes'] = None

        # set to None if estimated_departure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_departure_time is None and "estimated_departure_time" in self.__fields_set__:
            _dict['estimatedDepartureTime'] = None

        # set to None if estimated_arrival_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_arrival_time is None and "estimated_arrival_time" in self.__fields_set__:
            _dict['estimatedArrivalTime'] = None

        # set to None if estimated_duration_in_minutes (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_duration_in_minutes is None and "estimated_duration_in_minutes" in self.__fields_set__:
            _dict['estimatedDurationInMinutes'] = None

        # set to None if estimated_otherwise_planned_arrival_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_otherwise_planned_arrival_time is None and "estimated_otherwise_planned_arrival_time" in self.__fields_set__:
            _dict['estimatedOtherwisePlannedArrivalTime'] = None

        # set to None if estimated_otherwise_planned_departure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_otherwise_planned_departure_time is None and "estimated_otherwise_planned_departure_time" in self.__fields_set__:
            _dict['estimatedOtherwisePlannedDepartureTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.parse_obj({
            "origin": VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.from_dict(obj.get("origin")) if obj.get("origin") is not None else None,
            "destination": VTApiPlaneraResaWebV4ModelsJourneysCallApiModel.from_dict(obj.get("destination")) if obj.get("destination") is not None else None,
            "is_cancelled": obj.get("isCancelled"),
            "is_part_cancelled": obj.get("isPartCancelled"),
            "service_journey": VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel.from_dict(obj.get("serviceJourney")) if obj.get("serviceJourney") is not None else None,
            "notes": [VTApiPlaneraResaCoreModelsNote.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None,
            "estimated_distance_in_meters": obj.get("estimatedDistanceInMeters"),
            "planned_connecting_time_in_minutes": obj.get("plannedConnectingTimeInMinutes"),
            "estimated_connecting_time_in_minutes": obj.get("estimatedConnectingTimeInMinutes"),
            "is_risk_of_missing_connection": obj.get("isRiskOfMissingConnection"),
            "planned_departure_time": obj.get("plannedDepartureTime"),
            "planned_arrival_time": obj.get("plannedArrivalTime"),
            "planned_duration_in_minutes": obj.get("plannedDurationInMinutes"),
            "estimated_departure_time": obj.get("estimatedDepartureTime"),
            "estimated_arrival_time": obj.get("estimatedArrivalTime"),
            "estimated_duration_in_minutes": obj.get("estimatedDurationInMinutes"),
            "estimated_otherwise_planned_arrival_time": obj.get("estimatedOtherwisePlannedArrivalTime"),
            "estimated_otherwise_planned_departure_time": obj.get("estimatedOtherwisePlannedDepartureTime"),
            "occupancy": VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel.from_dict(obj.get("occupancy")) if obj.get("occupancy") is not None else None,
            "journey_leg_index": obj.get("journeyLegIndex")
        })
        return _obj


