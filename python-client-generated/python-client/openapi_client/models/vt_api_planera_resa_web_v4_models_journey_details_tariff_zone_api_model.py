# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel(BaseModel):
    """
    VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel
    """
    gid: Optional[StrictStr] = Field(None, description="The 16-digit Västtrafik gid of the tariff zone.")
    name: Optional[StrictStr] = Field(None, description="The name of the tariff zone.")
    number: Optional[StrictInt] = Field(None, description="The tariff zone number.")
    short_name: Optional[StrictStr] = Field(None, alias="shortName", description="The short name of the tariff zone.")
    __properties = ["gid", "name", "number", "shortName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if gid (nullable) is None
        # and __fields_set__ contains the field
        if self.gid is None and "gid" in self.__fields_set__:
            _dict['gid'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if short_name (nullable) is None
        # and __fields_set__ contains the field
        if self.short_name is None and "short_name" in self.__fields_set__:
            _dict['shortName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.parse_obj({
            "gid": obj.get("gid"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "short_name": obj.get("shortName")
        })
        return _obj


