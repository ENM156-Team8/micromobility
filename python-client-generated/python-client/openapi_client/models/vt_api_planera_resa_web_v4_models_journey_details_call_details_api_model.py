# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_stop_point_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_tariff_zone_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_occupancy_information_api_model import VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel

class VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel(BaseModel):
    """
    Information about a call on the trip leg.  # noqa: E501
    """
    stop_point: VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel = Field(..., alias="stopPoint")
    planned_arrival_time: Optional[StrictStr] = Field(None, alias="plannedArrivalTime", description="The planned arrival time for the call in RFC 3339 format.")
    planned_departure_time: Optional[StrictStr] = Field(None, alias="plannedDepartureTime", description="The planned departure time for the call in RFC 3339 format.")
    estimated_arrival_time: Optional[StrictStr] = Field(None, alias="estimatedArrivalTime", description="The estimated arrival time for the call in RFC 3339 format.")
    estimated_departure_time: Optional[StrictStr] = Field(None, alias="estimatedDepartureTime", description="The estimated departure time for the call in RFC 3339 format.")
    estimated_otherwise_planned_arrival_time: Optional[StrictStr] = Field(None, alias="estimatedOtherwisePlannedArrivalTime", description="The best known time of the call in RFC 3339 format. Is EstimatedArrivalTime if exists, otherwise PlannedArrivalTime.")
    estimated_otherwise_planned_departure_time: Optional[StrictStr] = Field(None, alias="estimatedOtherwisePlannedDepartureTime", description="The best known time of the call in RFC 3339 format. Is EstimatedDepartureTime if exists, otherwise PlannedDepartureTime.")
    planned_platform: Optional[StrictStr] = Field(None, alias="plannedPlatform", description="The planned platform of the call.")
    estimated_platform: Optional[StrictStr] = Field(None, alias="estimatedPlatform", description="The estimated platform of the call.")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The latitude of the stop point of the call.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The longitude of the stop point of the call.")
    index: Optional[StrictStr] = Field(None, description="The index of the stop point of the call.")
    is_on_trip_leg: Optional[StrictBool] = Field(None, alias="isOnTripLeg", description="The call is on the trip leg.")
    is_trip_leg_start: Optional[StrictBool] = Field(None, alias="isTripLegStart", description="The call is the first on the trip leg.")
    is_trip_leg_stop: Optional[StrictBool] = Field(None, alias="isTripLegStop", description="The call is the last on the trip leg.")
    tariff_zones: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel)] = Field(None, alias="tariffZones", description="The primary tariff zone of the call. A call can be related to a stop area with multiple tariff zones  and this is the zone that for example should be displayed in overviews etc.")
    occupancy: Optional[VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel] = None
    is_cancelled: Optional[StrictBool] = Field(None, alias="isCancelled", description="Flag indicating if the call is cancelled.")
    is_departure_cancelled: Optional[StrictBool] = Field(None, alias="isDepartureCancelled", description="Flag indicating if the departure is cancelled.")
    is_arrival_cancelled: Optional[StrictBool] = Field(None, alias="isArrivalCancelled", description="Flag indicating if the arrival is cancelled.")
    __properties = ["stopPoint", "plannedArrivalTime", "plannedDepartureTime", "estimatedArrivalTime", "estimatedDepartureTime", "estimatedOtherwisePlannedArrivalTime", "estimatedOtherwisePlannedDepartureTime", "plannedPlatform", "estimatedPlatform", "latitude", "longitude", "index", "isOnTripLeg", "isTripLegStart", "isTripLegStop", "tariffZones", "occupancy", "isCancelled", "isDepartureCancelled", "isArrivalCancelled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "estimated_otherwise_planned_arrival_time",
                            "estimated_otherwise_planned_departure_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of stop_point
        if self.stop_point:
            _dict['stopPoint'] = self.stop_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tariff_zones (list)
        _items = []
        if self.tariff_zones:
            for _item in self.tariff_zones:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tariffZones'] = _items
        # override the default output from pydantic by calling `to_dict()` of occupancy
        if self.occupancy:
            _dict['occupancy'] = self.occupancy.to_dict()
        # set to None if planned_arrival_time (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_arrival_time is None and "planned_arrival_time" in self.__fields_set__:
            _dict['plannedArrivalTime'] = None

        # set to None if planned_departure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_departure_time is None and "planned_departure_time" in self.__fields_set__:
            _dict['plannedDepartureTime'] = None

        # set to None if estimated_arrival_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_arrival_time is None and "estimated_arrival_time" in self.__fields_set__:
            _dict['estimatedArrivalTime'] = None

        # set to None if estimated_departure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_departure_time is None and "estimated_departure_time" in self.__fields_set__:
            _dict['estimatedDepartureTime'] = None

        # set to None if estimated_otherwise_planned_arrival_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_otherwise_planned_arrival_time is None and "estimated_otherwise_planned_arrival_time" in self.__fields_set__:
            _dict['estimatedOtherwisePlannedArrivalTime'] = None

        # set to None if estimated_otherwise_planned_departure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_otherwise_planned_departure_time is None and "estimated_otherwise_planned_departure_time" in self.__fields_set__:
            _dict['estimatedOtherwisePlannedDepartureTime'] = None

        # set to None if planned_platform (nullable) is None
        # and __fields_set__ contains the field
        if self.planned_platform is None and "planned_platform" in self.__fields_set__:
            _dict['plannedPlatform'] = None

        # set to None if estimated_platform (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_platform is None and "estimated_platform" in self.__fields_set__:
            _dict['estimatedPlatform'] = None

        # set to None if latitude (nullable) is None
        # and __fields_set__ contains the field
        if self.latitude is None and "latitude" in self.__fields_set__:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and __fields_set__ contains the field
        if self.longitude is None and "longitude" in self.__fields_set__:
            _dict['longitude'] = None

        # set to None if index (nullable) is None
        # and __fields_set__ contains the field
        if self.index is None and "index" in self.__fields_set__:
            _dict['index'] = None

        # set to None if is_on_trip_leg (nullable) is None
        # and __fields_set__ contains the field
        if self.is_on_trip_leg is None and "is_on_trip_leg" in self.__fields_set__:
            _dict['isOnTripLeg'] = None

        # set to None if is_trip_leg_start (nullable) is None
        # and __fields_set__ contains the field
        if self.is_trip_leg_start is None and "is_trip_leg_start" in self.__fields_set__:
            _dict['isTripLegStart'] = None

        # set to None if is_trip_leg_stop (nullable) is None
        # and __fields_set__ contains the field
        if self.is_trip_leg_stop is None and "is_trip_leg_stop" in self.__fields_set__:
            _dict['isTripLegStop'] = None

        # set to None if tariff_zones (nullable) is None
        # and __fields_set__ contains the field
        if self.tariff_zones is None and "tariff_zones" in self.__fields_set__:
            _dict['tariffZones'] = None

        # set to None if is_departure_cancelled (nullable) is None
        # and __fields_set__ contains the field
        if self.is_departure_cancelled is None and "is_departure_cancelled" in self.__fields_set__:
            _dict['isDepartureCancelled'] = None

        # set to None if is_arrival_cancelled (nullable) is None
        # and __fields_set__ contains the field
        if self.is_arrival_cancelled is None and "is_arrival_cancelled" in self.__fields_set__:
            _dict['isArrivalCancelled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.parse_obj({
            "stop_point": VTApiPlaneraResaWebV4ModelsJourneyDetailsStopPointApiModel.from_dict(obj.get("stopPoint")) if obj.get("stopPoint") is not None else None,
            "planned_arrival_time": obj.get("plannedArrivalTime"),
            "planned_departure_time": obj.get("plannedDepartureTime"),
            "estimated_arrival_time": obj.get("estimatedArrivalTime"),
            "estimated_departure_time": obj.get("estimatedDepartureTime"),
            "estimated_otherwise_planned_arrival_time": obj.get("estimatedOtherwisePlannedArrivalTime"),
            "estimated_otherwise_planned_departure_time": obj.get("estimatedOtherwisePlannedDepartureTime"),
            "planned_platform": obj.get("plannedPlatform"),
            "estimated_platform": obj.get("estimatedPlatform"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "index": obj.get("index"),
            "is_on_trip_leg": obj.get("isOnTripLeg"),
            "is_trip_leg_start": obj.get("isTripLegStart"),
            "is_trip_leg_stop": obj.get("isTripLegStop"),
            "tariff_zones": [VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.from_dict(_item) for _item in obj.get("tariffZones")] if obj.get("tariffZones") is not None else None,
            "occupancy": VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel.from_dict(obj.get("occupancy")) if obj.get("occupancy") is not None else None,
            "is_cancelled": obj.get("isCancelled"),
            "is_departure_cancelled": obj.get("isDepartureCancelled"),
            "is_arrival_cancelled": obj.get("isArrivalCancelled")
        })
        return _obj


