# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_tariff_zone_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel

class VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel(BaseModel):
    """
    VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel
    """
    gid: Optional[StrictStr] = Field(None, description="The 16-digit Västtrafik gid of the stop area.")
    name: Optional[StrictStr] = Field(None, description="The stop area name.")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The latitude of the stop point.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The longitude of the stop point.")
    tariff_zone1: Optional[VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel] = Field(None, alias="tariffZone1")
    tariff_zone2: Optional[VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel] = Field(None, alias="tariffZone2")
    __properties = ["gid", "name", "latitude", "longitude", "tariffZone1", "tariffZone2"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tariff_zone1
        if self.tariff_zone1:
            _dict['tariffZone1'] = self.tariff_zone1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tariff_zone2
        if self.tariff_zone2:
            _dict['tariffZone2'] = self.tariff_zone2.to_dict()
        # set to None if gid (nullable) is None
        # and __fields_set__ contains the field
        if self.gid is None and "gid" in self.__fields_set__:
            _dict['gid'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsStopAreaApiModel.parse_obj({
            "gid": obj.get("gid"),
            "name": obj.get("name"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "tariff_zone1": VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.from_dict(obj.get("tariffZone1")) if obj.get("tariffZone1") is not None else None,
            "tariff_zone2": VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.from_dict(obj.get("tariffZone2")) if obj.get("tariffZone2") is not None else None
        })
        return _obj


