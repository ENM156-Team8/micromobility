# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from openapi_client.models.vt_api_planera_resa_core_models_note import VTApiPlaneraResaCoreModelsNote
from openapi_client.models.vt_api_planera_resa_web_v4_models_positions_line_details_api_model import VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel

class VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel(BaseModel):
    """
    VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel
    """
    details_reference: Optional[StrictStr] = Field(None, alias="detailsReference", description="Journey reference")
    line: Optional[VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel] = None
    notes: Optional[conlist(VTApiPlaneraResaCoreModelsNote)] = Field(None, description="Journey notes")
    name: Optional[StrictStr] = Field(None, description="Journey name")
    direction: Optional[StrictStr] = Field(None, description="Journey direction")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Current latitude of journey")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Current longitude of journey")
    __properties = ["detailsReference", "line", "notes", "name", "direction", "latitude", "longitude"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of line
        if self.line:
            _dict['line'] = self.line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item in self.notes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['notes'] = _items
        # set to None if details_reference (nullable) is None
        # and __fields_set__ contains the field
        if self.details_reference is None and "details_reference" in self.__fields_set__:
            _dict['detailsReference'] = None

        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict['notes'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if direction (nullable) is None
        # and __fields_set__ contains the field
        if self.direction is None and "direction" in self.__fields_set__:
            _dict['direction'] = None

        # set to None if latitude (nullable) is None
        # and __fields_set__ contains the field
        if self.latitude is None and "latitude" in self.__fields_set__:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and __fields_set__ contains the field
        if self.longitude is None and "longitude" in self.__fields_set__:
            _dict['longitude'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel.parse_obj({
            "details_reference": obj.get("detailsReference"),
            "line": VTApiPlaneraResaWebV4ModelsPositionsLineDetailsApiModel.from_dict(obj.get("line")) if obj.get("line") is not None else None,
            "notes": [VTApiPlaneraResaCoreModelsNote.from_dict(_item) for _item in obj.get("notes")] if obj.get("notes") is not None else None,
            "name": obj.get("name"),
            "direction": obj.get("direction"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude")
        })
        return _obj


