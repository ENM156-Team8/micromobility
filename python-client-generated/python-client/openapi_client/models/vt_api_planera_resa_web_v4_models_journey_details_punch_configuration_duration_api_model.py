# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from openapi_client.models.vt_api_planera_resa_web_v4_models_punch_configuration_duration_unit_api_model import VTApiPlaneraResaWebV4ModelsPunchConfigurationDurationUnitApiModel

class VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationDurationApiModel(BaseModel):
    """
    Describes the duration of validity of a single punch.  # noqa: E501
    """
    unit: Optional[VTApiPlaneraResaWebV4ModelsPunchConfigurationDurationUnitApiModel] = None
    amount: Optional[StrictInt] = Field(None, description="Duration of validity of a single punch.")
    __properties = ["unit", "amount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationDurationApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationDurationApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if amount (nullable) is None
        # and __fields_set__ contains the field
        if self.amount is None and "amount" in self.__fields_set__:
            _dict['amount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationDurationApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationDurationApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationDurationApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsPunchConfigurationDurationApiModel.parse_obj({
            "unit": obj.get("unit"),
            "amount": obj.get("amount")
        })
        return _obj


