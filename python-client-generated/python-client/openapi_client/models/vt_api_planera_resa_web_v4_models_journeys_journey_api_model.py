# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_arrival_access_link_api_model import VTApiPlaneraResaWebV4ModelsJourneysArrivalAccessLinkApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_connection_link_api_model import VTApiPlaneraResaWebV4ModelsJourneysConnectionLinkApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_departure_access_link_api_model import VTApiPlaneraResaWebV4ModelsJourneysDepartureAccessLinkApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_destination_link_api_model import VTApiPlaneraResaWebV4ModelsJourneysDestinationLinkApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_trip_leg_api_model import VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_occupancy_information_api_model import VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel

class VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel(BaseModel):
    """
    Information about a journey.  # noqa: E501
    """
    reconstruction_reference: Optional[StrictStr] = Field(None, alias="reconstructionReference", description="A reference that can be used to reconstruct this journey at a later time.")
    details_reference: Optional[StrictStr] = Field(None, alias="detailsReference", description="A reference that should be used when getting detailed information about the journey.")
    departure_access_link: Optional[VTApiPlaneraResaWebV4ModelsJourneysDepartureAccessLinkApiModel] = Field(None, alias="departureAccessLink")
    trip_legs: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel)] = Field(None, alias="tripLegs", description="A list of trip legs on a journey, when applicable. A journey has either one or more trip legs or one  destination link.")
    connection_links: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneysConnectionLinkApiModel)] = Field(None, alias="connectionLinks", description="A list of ConnectionLinks between TripLegs, when applicable. The internal order of TripLegs and ConnectionLinks is defined by Index-property on the objects.")
    arrival_access_link: Optional[VTApiPlaneraResaWebV4ModelsJourneysArrivalAccessLinkApiModel] = Field(None, alias="arrivalAccessLink")
    destination_link: Optional[VTApiPlaneraResaWebV4ModelsJourneysDestinationLinkApiModel] = Field(None, alias="destinationLink")
    is_departed: Optional[StrictBool] = Field(None, alias="isDeparted", description="Flag indicating if the first trip leg of the journey is departed.")
    occupancy: Optional[VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel] = None
    __properties = ["reconstructionReference", "detailsReference", "departureAccessLink", "tripLegs", "connectionLinks", "arrivalAccessLink", "destinationLink", "isDeparted", "occupancy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of departure_access_link
        if self.departure_access_link:
            _dict['departureAccessLink'] = self.departure_access_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trip_legs (list)
        _items = []
        if self.trip_legs:
            for _item in self.trip_legs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tripLegs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in connection_links (list)
        _items = []
        if self.connection_links:
            for _item in self.connection_links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['connectionLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of arrival_access_link
        if self.arrival_access_link:
            _dict['arrivalAccessLink'] = self.arrival_access_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_link
        if self.destination_link:
            _dict['destinationLink'] = self.destination_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of occupancy
        if self.occupancy:
            _dict['occupancy'] = self.occupancy.to_dict()
        # set to None if reconstruction_reference (nullable) is None
        # and __fields_set__ contains the field
        if self.reconstruction_reference is None and "reconstruction_reference" in self.__fields_set__:
            _dict['reconstructionReference'] = None

        # set to None if details_reference (nullable) is None
        # and __fields_set__ contains the field
        if self.details_reference is None and "details_reference" in self.__fields_set__:
            _dict['detailsReference'] = None

        # set to None if trip_legs (nullable) is None
        # and __fields_set__ contains the field
        if self.trip_legs is None and "trip_legs" in self.__fields_set__:
            _dict['tripLegs'] = None

        # set to None if connection_links (nullable) is None
        # and __fields_set__ contains the field
        if self.connection_links is None and "connection_links" in self.__fields_set__:
            _dict['connectionLinks'] = None

        # set to None if is_departed (nullable) is None
        # and __fields_set__ contains the field
        if self.is_departed is None and "is_departed" in self.__fields_set__:
            _dict['isDeparted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel.parse_obj({
            "reconstruction_reference": obj.get("reconstructionReference"),
            "details_reference": obj.get("detailsReference"),
            "departure_access_link": VTApiPlaneraResaWebV4ModelsJourneysDepartureAccessLinkApiModel.from_dict(obj.get("departureAccessLink")) if obj.get("departureAccessLink") is not None else None,
            "trip_legs": [VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel.from_dict(_item) for _item in obj.get("tripLegs")] if obj.get("tripLegs") is not None else None,
            "connection_links": [VTApiPlaneraResaWebV4ModelsJourneysConnectionLinkApiModel.from_dict(_item) for _item in obj.get("connectionLinks")] if obj.get("connectionLinks") is not None else None,
            "arrival_access_link": VTApiPlaneraResaWebV4ModelsJourneysArrivalAccessLinkApiModel.from_dict(obj.get("arrivalAccessLink")) if obj.get("arrivalAccessLink") is not None else None,
            "destination_link": VTApiPlaneraResaWebV4ModelsJourneysDestinationLinkApiModel.from_dict(obj.get("destinationLink")) if obj.get("destinationLink") is not None else None,
            "is_departed": obj.get("isDeparted"),
            "occupancy": VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel.from_dict(obj.get("occupancy")) if obj.get("occupancy") is not None else None
        })
        return _obj


