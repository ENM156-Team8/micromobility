# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr
from openapi_client.models.vt_api_planera_resa_core_models_location_type import VTApiPlaneraResaCoreModelsLocationType

class VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel(BaseModel):
    """
    Information about a location.  # noqa: E501
    """
    gid: Optional[StrictStr] = Field(None, description="The 16-digit Västtrafik gid.")
    name: constr(strict=True, min_length=1) = Field(..., description="The location name.")
    location_type: VTApiPlaneraResaCoreModelsLocationType = Field(..., alias="locationType")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The WGS84 latitude of the location.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The WGS84 longitude of the location.")
    platform: Optional[StrictStr] = Field(None, description="The location platform, only available for stop points.")
    straight_line_distance_in_meters: Optional[StrictInt] = Field(None, alias="straightLineDistanceInMeters", description="The location straight line distance in meters.")
    has_local_service: Optional[StrictBool] = Field(None, alias="hasLocalService", description="Is \"Närtrafik\" (Local Service) available for the location?  Values are only available for LocationType: StopArea, PointOfInterest and Address.  Values are only available for endpoint: locations/by-text.")
    __properties = ["gid", "name", "locationType", "latitude", "longitude", "platform", "straightLineDistanceInMeters", "hasLocalService"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if gid (nullable) is None
        # and __fields_set__ contains the field
        if self.gid is None and "gid" in self.__fields_set__:
            _dict['gid'] = None

        # set to None if latitude (nullable) is None
        # and __fields_set__ contains the field
        if self.latitude is None and "latitude" in self.__fields_set__:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and __fields_set__ contains the field
        if self.longitude is None and "longitude" in self.__fields_set__:
            _dict['longitude'] = None

        # set to None if platform (nullable) is None
        # and __fields_set__ contains the field
        if self.platform is None and "platform" in self.__fields_set__:
            _dict['platform'] = None

        # set to None if straight_line_distance_in_meters (nullable) is None
        # and __fields_set__ contains the field
        if self.straight_line_distance_in_meters is None and "straight_line_distance_in_meters" in self.__fields_set__:
            _dict['straightLineDistanceInMeters'] = None

        # set to None if has_local_service (nullable) is None
        # and __fields_set__ contains the field
        if self.has_local_service is None and "has_local_service" in self.__fields_set__:
            _dict['hasLocalService'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsLocationsLocationApiModel.parse_obj({
            "gid": obj.get("gid"),
            "name": obj.get("name"),
            "location_type": obj.get("locationType"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "platform": obj.get("platform"),
            "straight_line_distance_in_meters": obj.get("straightLineDistanceInMeters"),
            "has_local_service": obj.get("hasLocalService")
        })
        return _obj


