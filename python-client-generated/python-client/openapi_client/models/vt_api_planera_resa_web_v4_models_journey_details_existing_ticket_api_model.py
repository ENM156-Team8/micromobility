# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel(BaseModel):
    """
    VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel
    """
    id: Optional[StrictStr] = Field(None, description="An Id for matching this existingTicket with ticketValidityApiModel in response.")
    offer_specification: Optional[StrictStr] = Field(None, alias="offerSpecification", description="From TicketSuggestionApiModel")
    time_of_issue: Optional[StrictStr] = Field(None, alias="timeOfIssue", description="Must be specified in RFC 3339 format")
    time_of_activation: Optional[StrictStr] = Field(None, alias="timeOfActivation", description="Must be specified in RFC 3339 format")
    __properties = ["id", "offerSpecification", "timeOfIssue", "timeOfActivation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if offer_specification (nullable) is None
        # and __fields_set__ contains the field
        if self.offer_specification is None and "offer_specification" in self.__fields_set__:
            _dict['offerSpecification'] = None

        # set to None if time_of_issue (nullable) is None
        # and __fields_set__ contains the field
        if self.time_of_issue is None and "time_of_issue" in self.__fields_set__:
            _dict['timeOfIssue'] = None

        # set to None if time_of_activation (nullable) is None
        # and __fields_set__ contains the field
        if self.time_of_activation is None and "time_of_activation" in self.__fields_set__:
            _dict['timeOfActivation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsExistingTicketApiModel.parse_obj({
            "id": obj.get("id"),
            "offer_specification": obj.get("offerSpecification"),
            "time_of_issue": obj.get("timeOfIssue"),
            "time_of_activation": obj.get("timeOfActivation")
        })
        return _obj


