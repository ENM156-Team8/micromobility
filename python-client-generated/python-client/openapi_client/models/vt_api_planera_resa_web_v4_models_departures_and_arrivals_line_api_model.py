# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.vt_api_planera_resa_core_models_transport_mode import VTApiPlaneraResaCoreModelsTransportMode
from openapi_client.models.vt_api_planera_resa_core_models_transport_sub_mode import VTApiPlaneraResaCoreModelsTransportSubMode

class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel(BaseModel):
    """
    Information about a line of a departure or arrival service journey.  # noqa: E501
    """
    gid: Optional[StrictStr] = Field(None, description="16-digit Västtrafik line gid.")
    name: Optional[StrictStr] = Field(None, description="The line name.")
    short_name: Optional[StrictStr] = Field(None, alias="shortName", description="The short name of the line, usually 5 characters or less.")
    designation: Optional[StrictStr] = Field(None, description="The designation of the line.")
    background_color: Optional[StrictStr] = Field(None, alias="backgroundColor", description="The background color of the line symbol.")
    foreground_color: Optional[StrictStr] = Field(None, alias="foregroundColor", description="The foreground color of the line symbol.")
    border_color: Optional[StrictStr] = Field(None, alias="borderColor", description="The border color of the line symbol.")
    transport_mode: Optional[VTApiPlaneraResaCoreModelsTransportMode] = Field(None, alias="transportMode")
    transport_sub_mode: Optional[VTApiPlaneraResaCoreModelsTransportSubMode] = Field(None, alias="transportSubMode")
    is_wheelchair_accessible: Optional[StrictBool] = Field(None, alias="isWheelchairAccessible", description="Flag indicating if the line is wheelchair accessible.")
    __properties = ["gid", "name", "shortName", "designation", "backgroundColor", "foregroundColor", "borderColor", "transportMode", "transportSubMode", "isWheelchairAccessible"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if gid (nullable) is None
        # and __fields_set__ contains the field
        if self.gid is None and "gid" in self.__fields_set__:
            _dict['gid'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if short_name (nullable) is None
        # and __fields_set__ contains the field
        if self.short_name is None and "short_name" in self.__fields_set__:
            _dict['shortName'] = None

        # set to None if designation (nullable) is None
        # and __fields_set__ contains the field
        if self.designation is None and "designation" in self.__fields_set__:
            _dict['designation'] = None

        # set to None if background_color (nullable) is None
        # and __fields_set__ contains the field
        if self.background_color is None and "background_color" in self.__fields_set__:
            _dict['backgroundColor'] = None

        # set to None if foreground_color (nullable) is None
        # and __fields_set__ contains the field
        if self.foreground_color is None and "foreground_color" in self.__fields_set__:
            _dict['foregroundColor'] = None

        # set to None if border_color (nullable) is None
        # and __fields_set__ contains the field
        if self.border_color is None and "border_color" in self.__fields_set__:
            _dict['borderColor'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel.parse_obj({
            "gid": obj.get("gid"),
            "name": obj.get("name"),
            "short_name": obj.get("shortName"),
            "designation": obj.get("designation"),
            "background_color": obj.get("backgroundColor"),
            "foreground_color": obj.get("foregroundColor"),
            "border_color": obj.get("borderColor"),
            "transport_mode": obj.get("transportMode"),
            "transport_sub_mode": obj.get("transportSubMode"),
            "is_wheelchair_accessible": obj.get("isWheelchairAccessible")
        })
        return _obj


