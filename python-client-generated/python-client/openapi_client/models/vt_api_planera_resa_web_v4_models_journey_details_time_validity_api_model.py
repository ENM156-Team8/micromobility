# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.vt_api_planera_resa_core_models_time_validity_type import VTApiPlaneraResaCoreModelsTimeValidityType
from openapi_client.models.vt_api_planera_resa_core_models_time_validity_unit import VTApiPlaneraResaCoreModelsTimeValidityUnit

class VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel(BaseModel):
    """
    Information about the time validity of a ticket suggestion.  # noqa: E501
    """
    type: Optional[VTApiPlaneraResaCoreModelsTimeValidityType] = None
    amount: Optional[StrictInt] = Field(None, description="The amount of the unit specified by the Unit property. Always used together with the Unit property.")
    unit: Optional[VTApiPlaneraResaCoreModelsTimeValidityUnit] = None
    from_date: Optional[StrictStr] = Field(None, alias="fromDate", description="The from date of a date interval specified in RFC 3339 format. Always used together with the  ToDate property.")
    to_date: Optional[StrictStr] = Field(None, alias="toDate", description="The to date of a date interval specified in RFC 3339 format. Always used together with the  FromDate property.")
    from_date_time: Optional[StrictStr] = Field(None, alias="fromDateTime", description="The from time of a datetime interval specified in RFC 3339 format. Always used together with  the ToDateTime property.")
    to_date_time: Optional[StrictStr] = Field(None, alias="toDateTime", description="The to time of a datetime interval specified in RFC 3339 format. Always used together with  the FromDateTime property.")
    __properties = ["type", "amount", "unit", "fromDate", "toDate", "fromDateTime", "toDateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if amount (nullable) is None
        # and __fields_set__ contains the field
        if self.amount is None and "amount" in self.__fields_set__:
            _dict['amount'] = None

        # set to None if from_date (nullable) is None
        # and __fields_set__ contains the field
        if self.from_date is None and "from_date" in self.__fields_set__:
            _dict['fromDate'] = None

        # set to None if to_date (nullable) is None
        # and __fields_set__ contains the field
        if self.to_date is None and "to_date" in self.__fields_set__:
            _dict['toDate'] = None

        # set to None if from_date_time (nullable) is None
        # and __fields_set__ contains the field
        if self.from_date_time is None and "from_date_time" in self.__fields_set__:
            _dict['fromDateTime'] = None

        # set to None if to_date_time (nullable) is None
        # and __fields_set__ contains the field
        if self.to_date_time is None and "to_date_time" in self.__fields_set__:
            _dict['toDateTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsTimeValidityApiModel.parse_obj({
            "type": obj.get("type"),
            "amount": obj.get("amount"),
            "unit": obj.get("unit"),
            "from_date": obj.get("fromDate"),
            "to_date": obj.get("toDate"),
            "from_date_time": obj.get("fromDateTime"),
            "to_date_time": obj.get("toDateTime")
        })
        return _obj


