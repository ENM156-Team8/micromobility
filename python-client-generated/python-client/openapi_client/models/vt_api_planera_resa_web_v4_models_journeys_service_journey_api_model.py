# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_line_api_model import VTApiPlaneraResaWebV4ModelsJourneysLineApiModel

class VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel(BaseModel):
    """
    Information about a service journey of a departure or arrival.  # noqa: E501
    """
    gid: constr(strict=True, min_length=1) = Field(..., description="16-digit Västtrafik service journey gid.")
    direction: Optional[StrictStr] = Field(None, description="A description of the direction.")
    number: Optional[StrictStr] = Field(None, description="Västtrafik service journey number that the trip leg is a part of.")
    line: Optional[VTApiPlaneraResaWebV4ModelsJourneysLineApiModel] = None
    __properties = ["gid", "direction", "number", "line"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of line
        if self.line:
            _dict['line'] = self.line.to_dict()
        # set to None if direction (nullable) is None
        # and __fields_set__ contains the field
        if self.direction is None and "direction" in self.__fields_set__:
            _dict['direction'] = None

        # set to None if number (nullable) is None
        # and __fields_set__ contains the field
        if self.number is None and "number" in self.__fields_set__:
            _dict['number'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneysServiceJourneyApiModel.parse_obj({
            "gid": obj.get("gid"),
            "direction": obj.get("direction"),
            "number": obj.get("number"),
            "line": VTApiPlaneraResaWebV4ModelsJourneysLineApiModel.from_dict(obj.get("line")) if obj.get("line") is not None else None
        })
        return _obj


