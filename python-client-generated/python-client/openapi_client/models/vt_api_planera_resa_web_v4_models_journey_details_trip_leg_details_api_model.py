# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist
from openapi_client.models.vt_api_planera_resa_web_v4_models_coordinate_api_model import VTApiPlaneraResaWebV4ModelsCoordinateApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_call_details_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_service_journey_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_tariff_zone_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_occupancy_information_api_model import VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel

class VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel(BaseModel):
    """
    Detailed information about a Public Transport trip leg.  # noqa: E501
    """
    service_journeys: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel)] = Field(None, alias="serviceJourneys", description="The service journey for the trip leg.")
    calls_on_trip_leg: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel)] = Field(None, alias="callsOnTripLeg", description="The calls on the trip leg.")
    trip_leg_coordinates: Optional[conlist(VTApiPlaneraResaWebV4ModelsCoordinateApiModel)] = Field(None, alias="tripLegCoordinates", description="The coordinates for the trip leg.")
    tariff_zones: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel)] = Field(None, alias="tariffZones", description="The tariff zones that the trip leg traverses.")
    is_cancelled: Optional[StrictBool] = Field(None, alias="isCancelled", description="Flag indicating if the trip leg is cancelled.")
    is_part_cancelled: Optional[StrictBool] = Field(None, alias="isPartCancelled", description="Flag indicating if the trip leg is partially cancelled.")
    occupancy: Optional[VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel] = None
    journey_leg_index: Optional[StrictInt] = Field(None, alias="journeyLegIndex", description="Index of Leg in Journey")
    __properties = ["serviceJourneys", "callsOnTripLeg", "tripLegCoordinates", "tariffZones", "isCancelled", "isPartCancelled", "occupancy", "journeyLegIndex"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in service_journeys (list)
        _items = []
        if self.service_journeys:
            for _item in self.service_journeys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serviceJourneys'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in calls_on_trip_leg (list)
        _items = []
        if self.calls_on_trip_leg:
            for _item in self.calls_on_trip_leg:
                if _item:
                    _items.append(_item.to_dict())
            _dict['callsOnTripLeg'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trip_leg_coordinates (list)
        _items = []
        if self.trip_leg_coordinates:
            for _item in self.trip_leg_coordinates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tripLegCoordinates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tariff_zones (list)
        _items = []
        if self.tariff_zones:
            for _item in self.tariff_zones:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tariffZones'] = _items
        # override the default output from pydantic by calling `to_dict()` of occupancy
        if self.occupancy:
            _dict['occupancy'] = self.occupancy.to_dict()
        # set to None if service_journeys (nullable) is None
        # and __fields_set__ contains the field
        if self.service_journeys is None and "service_journeys" in self.__fields_set__:
            _dict['serviceJourneys'] = None

        # set to None if calls_on_trip_leg (nullable) is None
        # and __fields_set__ contains the field
        if self.calls_on_trip_leg is None and "calls_on_trip_leg" in self.__fields_set__:
            _dict['callsOnTripLeg'] = None

        # set to None if trip_leg_coordinates (nullable) is None
        # and __fields_set__ contains the field
        if self.trip_leg_coordinates is None and "trip_leg_coordinates" in self.__fields_set__:
            _dict['tripLegCoordinates'] = None

        # set to None if tariff_zones (nullable) is None
        # and __fields_set__ contains the field
        if self.tariff_zones is None and "tariff_zones" in self.__fields_set__:
            _dict['tariffZones'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsTripLegDetailsApiModel.parse_obj({
            "service_journeys": [VTApiPlaneraResaWebV4ModelsJourneyDetailsServiceJourneyApiModel.from_dict(_item) for _item in obj.get("serviceJourneys")] if obj.get("serviceJourneys") is not None else None,
            "calls_on_trip_leg": [VTApiPlaneraResaWebV4ModelsJourneyDetailsCallDetailsApiModel.from_dict(_item) for _item in obj.get("callsOnTripLeg")] if obj.get("callsOnTripLeg") is not None else None,
            "trip_leg_coordinates": [VTApiPlaneraResaWebV4ModelsCoordinateApiModel.from_dict(_item) for _item in obj.get("tripLegCoordinates")] if obj.get("tripLegCoordinates") is not None else None,
            "tariff_zones": [VTApiPlaneraResaWebV4ModelsJourneyDetailsTariffZoneApiModel.from_dict(_item) for _item in obj.get("tariffZones")] if obj.get("tariffZones") is not None else None,
            "is_cancelled": obj.get("isCancelled"),
            "is_part_cancelled": obj.get("isPartCancelled"),
            "occupancy": VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel.from_dict(obj.get("occupancy")) if obj.get("occupancy") is not None else None,
            "journey_leg_index": obj.get("journeyLegIndex")
        })
        return _obj


