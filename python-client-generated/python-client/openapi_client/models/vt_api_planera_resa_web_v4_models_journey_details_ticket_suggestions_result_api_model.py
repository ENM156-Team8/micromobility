# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_ticket_suggestion_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_ticket_validity_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketValidityApiModel

class VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel(BaseModel):
    """
    VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel
    """
    has_error: Optional[StrictBool] = Field(None, alias="hasError", description="Flag indicating that an error occurred while getting ticket suggestions.")
    ticket_suggestions: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel)] = Field(None, alias="ticketSuggestions", description="Ticket suggestions for a journey.")
    ticket_validities: Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketValidityApiModel)] = Field(None, alias="ticketValidities", description="An array with the tickets from the existingTickets-array in the post-body. Validity for the journey is indicated for each ticket in the array. Included if 'ticketsuggestions' is passed in the includes array in the request, otherwise null.")
    __properties = ["hasError", "ticketSuggestions", "ticketValidities"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ticket_suggestions (list)
        _items = []
        if self.ticket_suggestions:
            for _item in self.ticket_suggestions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ticketSuggestions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ticket_validities (list)
        _items = []
        if self.ticket_validities:
            for _item in self.ticket_validities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ticketValidities'] = _items
        # set to None if ticket_suggestions (nullable) is None
        # and __fields_set__ contains the field
        if self.ticket_suggestions is None and "ticket_suggestions" in self.__fields_set__:
            _dict['ticketSuggestions'] = None

        # set to None if ticket_validities (nullable) is None
        # and __fields_set__ contains the field
        if self.ticket_validities is None and "ticket_validities" in self.__fields_set__:
            _dict['ticketValidities'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionsResultApiModel.parse_obj({
            "has_error": obj.get("hasError"),
            "ticket_suggestions": [VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketSuggestionApiModel.from_dict(_item) for _item in obj.get("ticketSuggestions")] if obj.get("ticketSuggestions") is not None else None,
            "ticket_validities": [VTApiPlaneraResaWebV4ModelsJourneyDetailsTicketValidityApiModel.from_dict(_item) for _item in obj.get("ticketValidities")] if obj.get("ticketValidities") is not None else None
        })
        return _obj


