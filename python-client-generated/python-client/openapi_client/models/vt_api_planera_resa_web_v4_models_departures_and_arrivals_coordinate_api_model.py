# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel(BaseModel):
    """
    Information about the coordinates  # noqa: E501
    """
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The latitude of this position (WGS84).")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The longitude of this position (WGS84).")
    elevation: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The elevation of this position (WGS84).")
    __properties = ["latitude", "longitude", "elevation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if elevation (nullable) is None
        # and __fields_set__ contains the field
        if self.elevation is None and "elevation" in self.__fields_set__:
            _dict['elevation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsCoordinateApiModel.parse_obj({
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "elevation": obj.get("elevation")
        })
        return _obj


