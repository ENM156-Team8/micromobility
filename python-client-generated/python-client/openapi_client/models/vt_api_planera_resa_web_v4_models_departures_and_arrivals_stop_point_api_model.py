# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, constr

class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel(BaseModel):
    """
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel
    """
    gid: constr(strict=True, min_length=1) = Field(..., description="The 16-digit Västtrafik gid of the stop point.")
    name: constr(strict=True, min_length=1) = Field(..., description="The stop point name.")
    platform: Optional[StrictStr] = Field(None, description="The platform of the stop point.")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The latitude coordinate of the stop point")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="The logitude coordinate of the stop point")
    __properties = ["gid", "name", "platform", "latitude", "longitude"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if platform (nullable) is None
        # and __fields_set__ contains the field
        if self.platform is None and "platform" in self.__fields_set__:
            _dict['platform'] = None

        # set to None if latitude (nullable) is None
        # and __fields_set__ contains the field
        if self.latitude is None and "latitude" in self.__fields_set__:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and __fields_set__ contains the field
        if self.longitude is None and "longitude" in self.__fields_set__:
            _dict['longitude'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.parse_obj({
            "gid": obj.get("gid"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude")
        })
        return _obj


