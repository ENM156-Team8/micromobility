# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.vt_api_planera_resa_web_v4_models_link_segment_maneuver import VTApiPlaneraResaWebV4ModelsLinkSegmentManeuver
from openapi_client.models.vt_api_planera_resa_web_v4_models_link_segment_orientation import VTApiPlaneraResaWebV4ModelsLinkSegmentOrientation

class VTApiPlaneraResaWebV4ModelsJourneyDetailsLinkSegmentApiModel(BaseModel):
    """
    Represents a segment of a departure access link, arrival access link or destination link.  # noqa: E501
    """
    name: Optional[StrictStr] = Field(None, description="Segment name.")
    maneuver: Optional[VTApiPlaneraResaWebV4ModelsLinkSegmentManeuver] = None
    orientation: Optional[VTApiPlaneraResaWebV4ModelsLinkSegmentOrientation] = None
    maneuver_description: Optional[StrictStr] = Field(None, alias="maneuverDescription", description="Description for the maneuver.")
    distance_in_meters: Optional[StrictInt] = Field(None, alias="distanceInMeters", description="Distance for this segment in meter.")
    __properties = ["name", "maneuver", "orientation", "maneuverDescription", "distanceInMeters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsLinkSegmentApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsLinkSegmentApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if maneuver_description (nullable) is None
        # and __fields_set__ contains the field
        if self.maneuver_description is None and "maneuver_description" in self.__fields_set__:
            _dict['maneuverDescription'] = None

        # set to None if distance_in_meters (nullable) is None
        # and __fields_set__ contains the field
        if self.distance_in_meters is None and "distance_in_meters" in self.__fields_set__:
            _dict['distanceInMeters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsLinkSegmentApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsJourneyDetailsLinkSegmentApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsJourneyDetailsLinkSegmentApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsJourneyDetailsLinkSegmentApiModel.parse_obj({
            "name": obj.get("name"),
            "maneuver": obj.get("maneuver"),
            "orientation": obj.get("orientation"),
            "maneuver_description": obj.get("maneuverDescription"),
            "distance_in_meters": obj.get("distanceInMeters")
        })
        return _obj


