# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr
from openapi_client.models.vt_api_planera_resa_web_v4_models_departures_and_arrivals_service_journey_api_model import VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_departures_and_arrivals_stop_point_api_model import VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_occupancy_information_api_model import VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel

class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel(BaseModel):
    """
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel
    """
    details_reference: Optional[StrictStr] = Field(None, alias="detailsReference", description="A reference that should be used when getting detailed information about the journey.")
    service_journey: Optional[VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel] = Field(None, alias="serviceJourney")
    stop_point: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel = Field(..., alias="stopPoint")
    planned_time: constr(strict=True, min_length=1) = Field(..., alias="plannedTime", description="The planned time of the call in RFC 3339 format.")
    estimated_time: Optional[StrictStr] = Field(None, alias="estimatedTime", description="The estimated time of the call in RFC 3339 format.")
    estimated_otherwise_planned_time: Optional[StrictStr] = Field(None, alias="estimatedOtherwisePlannedTime", description="The best known time of the call in RFC 3339 format. Is EstimatedTime if exists, otherwise PlannedTime.")
    is_cancelled: Optional[StrictBool] = Field(None, alias="isCancelled", description="Flag indicating if the departure or arrival is cancelled.")
    is_part_cancelled: Optional[StrictBool] = Field(None, alias="isPartCancelled", description="Flag indicating if the departure or arrival is partially cancelled.")
    occupancy: Optional[VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel] = None
    __properties = ["detailsReference", "serviceJourney", "stopPoint", "plannedTime", "estimatedTime", "estimatedOtherwisePlannedTime", "isCancelled", "isPartCancelled", "occupancy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "estimated_otherwise_planned_time",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of service_journey
        if self.service_journey:
            _dict['serviceJourney'] = self.service_journey.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stop_point
        if self.stop_point:
            _dict['stopPoint'] = self.stop_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of occupancy
        if self.occupancy:
            _dict['occupancy'] = self.occupancy.to_dict()
        # set to None if details_reference (nullable) is None
        # and __fields_set__ contains the field
        if self.details_reference is None and "details_reference" in self.__fields_set__:
            _dict['detailsReference'] = None

        # set to None if estimated_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_time is None and "estimated_time" in self.__fields_set__:
            _dict['estimatedTime'] = None

        # set to None if estimated_otherwise_planned_time (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_otherwise_planned_time is None and "estimated_otherwise_planned_time" in self.__fields_set__:
            _dict['estimatedOtherwisePlannedTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel:
        """Create an instance of VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.parse_obj(obj)

        _obj = VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureApiModel.parse_obj({
            "details_reference": obj.get("detailsReference"),
            "service_journey": VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsServiceJourneyApiModel.from_dict(obj.get("serviceJourney")) if obj.get("serviceJourney") is not None else None,
            "stop_point": VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsStopPointApiModel.from_dict(obj.get("stopPoint")) if obj.get("stopPoint") is not None else None,
            "planned_time": obj.get("plannedTime"),
            "estimated_time": obj.get("estimatedTime"),
            "estimated_otherwise_planned_time": obj.get("estimatedOtherwisePlannedTime"),
            "is_cancelled": obj.get("isCancelled"),
            "is_part_cancelled": obj.get("isPartCancelled"),
            "occupancy": VTApiPlaneraResaWebV4ModelsOccupancyInformationApiModel.from_dict(obj.get("occupancy")) if obj.get("occupancy") is not None else None
        })
        return _obj


