# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import Optional

from openapi_client.models.vt_api_planera_resa_web_v4_models_arrival_details_include_type import VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType
from openapi_client.models.vt_api_planera_resa_web_v4_models_departure_details_include_type import VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType
from openapi_client.models.vt_api_planera_resa_web_v4_models_departures_and_arrivals_arrival_details_api_model import VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_departures_and_arrivals_departure_details_api_model import VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_departures_and_arrivals_get_arrivals_response import VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse
from openapi_client.models.vt_api_planera_resa_web_v4_models_departures_and_arrivals_get_departures_response import VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class StopAreasApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def stop_areas_stop_area_gid_arrivals_details_reference_details_get(self, details_reference : Annotated[StrictStr, Field(..., description="The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.")], stop_area_gid : StrictStr, includes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType)], Field(description="The additional information to include in the response.")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel:  # noqa: E501
        """Returns details about an arrival.  # noqa: E501

        Sample request:        GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes=servicejourneycalls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_arrivals_details_reference_details_get(details_reference, stop_area_gid, includes, async_req=True)
        >>> result = thread.get()

        :param details_reference: The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated. (required)
        :type details_reference: str
        :param stop_area_gid: (required)
        :type stop_area_gid: str
        :param includes: The additional information to include in the response.
        :type includes: List[VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the stop_areas_stop_area_gid_arrivals_details_reference_details_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.stop_areas_stop_area_gid_arrivals_details_reference_details_get_with_http_info(details_reference, stop_area_gid, includes, **kwargs)  # noqa: E501

    @validate_arguments
    def stop_areas_stop_area_gid_arrivals_details_reference_details_get_with_http_info(self, details_reference : Annotated[StrictStr, Field(..., description="The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated.")], stop_area_gid : StrictStr, includes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType)], Field(description="The additional information to include in the response.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns details about an arrival.  # noqa: E501

        Sample request:        GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes=servicejourneycalls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_arrivals_details_reference_details_get_with_http_info(details_reference, stop_area_gid, includes, async_req=True)
        >>> result = thread.get()

        :param details_reference: The reference to the service journey, received from the arrivals call. A detailsReference is only valid during the same day as it was generated. (required)
        :type details_reference: str
        :param stop_area_gid: (required)
        :type stop_area_gid: str
        :param includes: The additional information to include in the response.
        :type includes: List[VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'details_reference',
            'stop_area_gid',
            'includes'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_areas_stop_area_gid_arrivals_details_reference_details_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['details_reference']:
            _path_params['detailsReference'] = _params['details_reference']

        if _params['stop_area_gid']:
            _path_params['stopAreaGid'] = _params['stop_area_gid']


        # process the query parameters
        _query_params = []
        if _params.get('includes') is not None:  # noqa: E501
            _query_params.append(('includes', _params['includes']))
            _collection_formats['includes'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '404': "MicrosoftAspNetCoreMvcProblemDetails",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/stop-areas/{stopAreaGid}/arrivals/{detailsReference}/details', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def stop_areas_stop_area_gid_arrivals_get(self, stop_area_gid : Annotated[StrictStr, Field(..., description="The 16-digit Västtrafik gid of the stop area.")], start_date_time : Annotated[Optional[datetime], Field(description="The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.")] = None, platforms : Annotated[Optional[StrictStr], Field(description="Filter results by platform. Multiple platforms are separated by comma. Case sensitive.")] = None, time_span_in_minutes : Annotated[Optional[StrictInt], Field(description="The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440.")] = None, max_arrivals_per_line_and_direction : Annotated[Optional[StrictInt], Field(description="The maximum number of arrivals for a single line in a specific direction.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, direction_gid : Annotated[Optional[StrictStr], Field(description="Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse:  # noqa: E501
        """Returns arrivals to the specified stop area at the specified time.  # noqa: E501

        Sample request:        GET /stop-areas/9021014003980000/arrivals  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_arrivals_get(stop_area_gid, start_date_time, platforms, time_span_in_minutes, max_arrivals_per_line_and_direction, limit, offset, direction_gid, async_req=True)
        >>> result = thread.get()

        :param stop_area_gid: The 16-digit Västtrafik gid of the stop area. (required)
        :type stop_area_gid: str
        :param start_date_time: The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.
        :type start_date_time: datetime
        :param platforms: Filter results by platform. Multiple platforms are separated by comma. Case sensitive.
        :type platforms: str
        :param time_span_in_minutes: The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440.
        :type time_span_in_minutes: int
        :param max_arrivals_per_line_and_direction: The maximum number of arrivals for a single line in a specific direction.
        :type max_arrivals_per_line_and_direction: int
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param direction_gid: Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area
        :type direction_gid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the stop_areas_stop_area_gid_arrivals_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.stop_areas_stop_area_gid_arrivals_get_with_http_info(stop_area_gid, start_date_time, platforms, time_span_in_minutes, max_arrivals_per_line_and_direction, limit, offset, direction_gid, **kwargs)  # noqa: E501

    @validate_arguments
    def stop_areas_stop_area_gid_arrivals_get_with_http_info(self, stop_area_gid : Annotated[StrictStr, Field(..., description="The 16-digit Västtrafik gid of the stop area.")], start_date_time : Annotated[Optional[datetime], Field(description="The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.")] = None, platforms : Annotated[Optional[StrictStr], Field(description="Filter results by platform. Multiple platforms are separated by comma. Case sensitive.")] = None, time_span_in_minutes : Annotated[Optional[StrictInt], Field(description="The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440.")] = None, max_arrivals_per_line_and_direction : Annotated[Optional[StrictInt], Field(description="The maximum number of arrivals for a single line in a specific direction.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, direction_gid : Annotated[Optional[StrictStr], Field(description="Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns arrivals to the specified stop area at the specified time.  # noqa: E501

        Sample request:        GET /stop-areas/9021014003980000/arrivals  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_arrivals_get_with_http_info(stop_area_gid, start_date_time, platforms, time_span_in_minutes, max_arrivals_per_line_and_direction, limit, offset, direction_gid, async_req=True)
        >>> result = thread.get()

        :param stop_area_gid: The 16-digit Västtrafik gid of the stop area. (required)
        :type stop_area_gid: str
        :param start_date_time: The start of the time interval for which to get upcoming arrivals. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.
        :type start_date_time: datetime
        :param platforms: Filter results by platform. Multiple platforms are separated by comma. Case sensitive.
        :type platforms: str
        :param time_span_in_minutes: The number of minutes from the start time for which to get upcoming arrivals. Allowed values are between 0 and 1440.
        :type time_span_in_minutes: int
        :param max_arrivals_per_line_and_direction: The maximum number of arrivals for a single line in a specific direction.
        :type max_arrivals_per_line_and_direction: int
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param direction_gid: Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area
        :type direction_gid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'stop_area_gid',
            'start_date_time',
            'platforms',
            'time_span_in_minutes',
            'max_arrivals_per_line_and_direction',
            'limit',
            'offset',
            'direction_gid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_areas_stop_area_gid_arrivals_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['stop_area_gid']:
            _path_params['stopAreaGid'] = _params['stop_area_gid']


        # process the query parameters
        _query_params = []
        if _params.get('start_date_time') is not None:  # noqa: E501
            if isinstance(_params['start_date_time'], datetime):
                _query_params.append(('startDateTime', _params['start_date_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('startDateTime', _params['start_date_time']))

        if _params.get('platforms') is not None:  # noqa: E501
            _query_params.append(('platforms', _params['platforms']))

        if _params.get('time_span_in_minutes') is not None:  # noqa: E501
            _query_params.append(('timeSpanInMinutes', _params['time_span_in_minutes']))

        if _params.get('max_arrivals_per_line_and_direction') is not None:  # noqa: E501
            _query_params.append(('maxArrivalsPerLineAndDirection', _params['max_arrivals_per_line_and_direction']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('direction_gid') is not None:  # noqa: E501
            _query_params.append(('directionGid', _params['direction_gid']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '404': "MicrosoftAspNetCoreMvcProblemDetails",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/stop-areas/{stopAreaGid}/arrivals', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def stop_areas_stop_area_gid_departures_details_reference_details_get(self, details_reference : Annotated[StrictStr, Field(..., description="The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.")], stop_area_gid : StrictStr, includes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType)], Field(description="The additional information to include in the response.")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel:  # noqa: E501
        """Returns details about a departure.  # noqa: E501

        Sample request:        GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes=servicejourneycalls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_departures_details_reference_details_get(details_reference, stop_area_gid, includes, async_req=True)
        >>> result = thread.get()

        :param details_reference: The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated. (required)
        :type details_reference: str
        :param stop_area_gid: (required)
        :type stop_area_gid: str
        :param includes: The additional information to include in the response.
        :type includes: List[VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the stop_areas_stop_area_gid_departures_details_reference_details_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.stop_areas_stop_area_gid_departures_details_reference_details_get_with_http_info(details_reference, stop_area_gid, includes, **kwargs)  # noqa: E501

    @validate_arguments
    def stop_areas_stop_area_gid_departures_details_reference_details_get_with_http_info(self, details_reference : Annotated[StrictStr, Field(..., description="The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated.")], stop_area_gid : StrictStr, includes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType)], Field(description="The additional information to include in the response.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns details about a departure.  # noqa: E501

        Sample request:        GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes=servicejourneycalls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_departures_details_reference_details_get_with_http_info(details_reference, stop_area_gid, includes, async_req=True)
        >>> result = thread.get()

        :param details_reference: The reference to the service journey, received from the departures call. A detailsReference is only valid during the same day as it was generated. (required)
        :type details_reference: str
        :param stop_area_gid: (required)
        :type stop_area_gid: str
        :param includes: The additional information to include in the response.
        :type includes: List[VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'details_reference',
            'stop_area_gid',
            'includes'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_areas_stop_area_gid_departures_details_reference_details_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['details_reference']:
            _path_params['detailsReference'] = _params['details_reference']

        if _params['stop_area_gid']:
            _path_params['stopAreaGid'] = _params['stop_area_gid']


        # process the query parameters
        _query_params = []
        if _params.get('includes') is not None:  # noqa: E501
            _query_params.append(('includes', _params['includes']))
            _collection_formats['includes'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '404': "MicrosoftAspNetCoreMvcProblemDetails",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/stop-areas/{stopAreaGid}/departures/{detailsReference}/details', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def stop_areas_stop_area_gid_departures_get(self, stop_area_gid : Annotated[StrictStr, Field(..., description="The 16-digit Västtrafik gid of the stop area.")], start_date_time : Annotated[Optional[datetime], Field(description="The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.")] = None, platforms : Annotated[Optional[StrictStr], Field(description="Filter results by platform. Multiple platforms are separated by comma. Case sensitive.")] = None, time_span_in_minutes : Annotated[Optional[StrictInt], Field(description="The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440.")] = None, max_departures_per_line_and_direction : Annotated[Optional[StrictInt], Field(description="The maximum number of departures for a single line in a specific direction.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, include_occupancy : Annotated[Optional[StrictBool], Field(description="Includes occupancy in departure.")] = None, direction_gid : Annotated[Optional[StrictStr], Field(description="Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse:  # noqa: E501
        """Returns departures from the specified stop area at the specified time.  # noqa: E501

        Sample request:        GET /stop-areas/9021014003980000/departures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_departures_get(stop_area_gid, start_date_time, platforms, time_span_in_minutes, max_departures_per_line_and_direction, limit, offset, include_occupancy, direction_gid, async_req=True)
        >>> result = thread.get()

        :param stop_area_gid: The 16-digit Västtrafik gid of the stop area. (required)
        :type stop_area_gid: str
        :param start_date_time: The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.
        :type start_date_time: datetime
        :param platforms: Filter results by platform. Multiple platforms are separated by comma. Case sensitive.
        :type platforms: str
        :param time_span_in_minutes: The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440.
        :type time_span_in_minutes: int
        :param max_departures_per_line_and_direction: The maximum number of departures for a single line in a specific direction.
        :type max_departures_per_line_and_direction: int
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param include_occupancy: Includes occupancy in departure.
        :type include_occupancy: bool
        :param direction_gid: Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area
        :type direction_gid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the stop_areas_stop_area_gid_departures_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.stop_areas_stop_area_gid_departures_get_with_http_info(stop_area_gid, start_date_time, platforms, time_span_in_minutes, max_departures_per_line_and_direction, limit, offset, include_occupancy, direction_gid, **kwargs)  # noqa: E501

    @validate_arguments
    def stop_areas_stop_area_gid_departures_get_with_http_info(self, stop_area_gid : Annotated[StrictStr, Field(..., description="The 16-digit Västtrafik gid of the stop area.")], start_date_time : Annotated[Optional[datetime], Field(description="The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.")] = None, platforms : Annotated[Optional[StrictStr], Field(description="Filter results by platform. Multiple platforms are separated by comma. Case sensitive.")] = None, time_span_in_minutes : Annotated[Optional[StrictInt], Field(description="The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440.")] = None, max_departures_per_line_and_direction : Annotated[Optional[StrictInt], Field(description="The maximum number of departures for a single line in a specific direction.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, include_occupancy : Annotated[Optional[StrictBool], Field(description="Includes occupancy in departure.")] = None, direction_gid : Annotated[Optional[StrictStr], Field(description="Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns departures from the specified stop area at the specified time.  # noqa: E501

        Sample request:        GET /stop-areas/9021014003980000/departures  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stop_areas_stop_area_gid_departures_get_with_http_info(stop_area_gid, start_date_time, platforms, time_span_in_minutes, max_departures_per_line_and_direction, limit, offset, include_occupancy, direction_gid, async_req=True)
        >>> result = thread.get()

        :param stop_area_gid: The 16-digit Västtrafik gid of the stop area. (required)
        :type stop_area_gid: str
        :param start_date_time: The start of the time interval for which to get upcoming departures. Must be specified in RFC 3339 format or be null which means that the current time on the server is used.
        :type start_date_time: datetime
        :param platforms: Filter results by platform. Multiple platforms are separated by comma. Case sensitive.
        :type platforms: str
        :param time_span_in_minutes: The number of minutes from the start time for which to get upcoming departures. Allowed values are between 0 and 1440.
        :type time_span_in_minutes: int
        :param max_departures_per_line_and_direction: The maximum number of departures for a single line in a specific direction.
        :type max_departures_per_line_and_direction: int
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param include_occupancy: Includes occupancy in departure.
        :type include_occupancy: bool
        :param direction_gid: Filter result by last stop on journey. Must be a 16-digit Västtrafik stop area
        :type direction_gid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'stop_area_gid',
            'start_date_time',
            'platforms',
            'time_span_in_minutes',
            'max_departures_per_line_and_direction',
            'limit',
            'offset',
            'include_occupancy',
            'direction_gid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_areas_stop_area_gid_departures_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['stop_area_gid']:
            _path_params['stopAreaGid'] = _params['stop_area_gid']


        # process the query parameters
        _query_params = []
        if _params.get('start_date_time') is not None:  # noqa: E501
            if isinstance(_params['start_date_time'], datetime):
                _query_params.append(('startDateTime', _params['start_date_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('startDateTime', _params['start_date_time']))

        if _params.get('platforms') is not None:  # noqa: E501
            _query_params.append(('platforms', _params['platforms']))

        if _params.get('time_span_in_minutes') is not None:  # noqa: E501
            _query_params.append(('timeSpanInMinutes', _params['time_span_in_minutes']))

        if _params.get('max_departures_per_line_and_direction') is not None:  # noqa: E501
            _query_params.append(('maxDeparturesPerLineAndDirection', _params['max_departures_per_line_and_direction']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('include_occupancy') is not None:  # noqa: E501
            _query_params.append(('includeOccupancy', _params['include_occupancy']))

        if _params.get('direction_gid') is not None:  # noqa: E501
            _query_params.append(('directionGid', _params['direction_gid']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '404': "MicrosoftAspNetCoreMvcProblemDetails",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/stop-areas/{stopAreaGid}/departures', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
