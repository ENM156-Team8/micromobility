# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

from typing import Optional, Union

from openapi_client.models.vt_api_planera_resa_core_models_date_time_relates_to_type import VTApiPlaneraResaCoreModelsDateTimeRelatesToType
from openapi_client.models.vt_api_planera_resa_core_models_traveller_category import VTApiPlaneraResaCoreModelsTravellerCategory
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_include_type import VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_details_journey_details_api_model import VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_transport_mode import VTApiPlaneraResaWebV4ModelsJourneyTransportMode
from openapi_client.models.vt_api_planera_resa_web_v4_models_journey_transport_sub_mode import VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_get_journeys_response import VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse
from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_journey_api_model import VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel
from openapi_client.models.vt_api_planera_resa_web_v4_models_valid_time_interval_api_model import VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class JourneysApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def journeys_details_reference_details_get(self, details_reference : Annotated[StrictStr, Field(..., description="The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.")], includes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType)], Field(description="The additional information to include in the response.")] = None, channel_ids : Annotated[Optional[conlist(StrictInt)], Field(description="List of channel ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.")] = None, product_types : Annotated[Optional[conlist(StrictInt)], Field(description="List of product type ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.")] = None, traveller_categories : Annotated[Optional[conlist(VTApiPlaneraResaCoreModelsTravellerCategory)], Field(description="List of traveller category ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel:  # noqa: E501
        """Returns details about a journey.  # noqa: E501

        Sample request:        GET /journeys/{detailsReference}/details?includes=ticketsuggestions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_details_reference_details_get(details_reference, includes, channel_ids, product_types, traveller_categories, async_req=True)
        >>> result = thread.get()

        :param details_reference: The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated. (required)
        :type details_reference: str
        :param includes: The additional information to include in the response.
        :type includes: List[VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType]
        :param channel_ids: List of channel ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.
        :type channel_ids: List[int]
        :param product_types: List of product type ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.
        :type product_types: List[int]
        :param traveller_categories: List of traveller category ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.
        :type traveller_categories: List[VTApiPlaneraResaCoreModelsTravellerCategory]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the journeys_details_reference_details_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.journeys_details_reference_details_get_with_http_info(details_reference, includes, channel_ids, product_types, traveller_categories, **kwargs)  # noqa: E501

    @validate_arguments
    def journeys_details_reference_details_get_with_http_info(self, details_reference : Annotated[StrictStr, Field(..., description="The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated.")], includes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType)], Field(description="The additional information to include in the response.")] = None, channel_ids : Annotated[Optional[conlist(StrictInt)], Field(description="List of channel ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.")] = None, product_types : Annotated[Optional[conlist(StrictInt)], Field(description="List of product type ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.")] = None, traveller_categories : Annotated[Optional[conlist(VTApiPlaneraResaCoreModelsTravellerCategory)], Field(description="List of traveller category ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns details about a journey.  # noqa: E501

        Sample request:        GET /journeys/{detailsReference}/details?includes=ticketsuggestions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_details_reference_details_get_with_http_info(details_reference, includes, channel_ids, product_types, traveller_categories, async_req=True)
        >>> result = thread.get()

        :param details_reference: The reference to the journey, received from the search journeys query. A detailsReference is only valid during the same day as it was generated. (required)
        :type details_reference: str
        :param includes: The additional information to include in the response.
        :type includes: List[VTApiPlaneraResaWebV4ModelsJourneyDetailsIncludeType]
        :param channel_ids: List of channel ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.
        :type channel_ids: List[int]
        :param product_types: List of product type ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.
        :type product_types: List[int]
        :param traveller_categories: List of traveller category ids to include if 'ticketsuggestions' is set in the 'includes' parameter. Optional parameter.
        :type traveller_categories: List[VTApiPlaneraResaCoreModelsTravellerCategory]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'details_reference',
            'includes',
            'channel_ids',
            'product_types',
            'traveller_categories'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journeys_details_reference_details_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['details_reference']:
            _path_params['detailsReference'] = _params['details_reference']


        # process the query parameters
        _query_params = []
        if _params.get('includes') is not None:  # noqa: E501
            _query_params.append(('includes', _params['includes']))
            _collection_formats['includes'] = 'multi'

        if _params.get('channel_ids') is not None:  # noqa: E501
            _query_params.append(('channelIds', _params['channel_ids']))
            _collection_formats['channelIds'] = 'multi'

        if _params.get('product_types') is not None:  # noqa: E501
            _query_params.append(('productTypes', _params['product_types']))
            _collection_formats['productTypes'] = 'multi'

        if _params.get('traveller_categories') is not None:  # noqa: E501
            _query_params.append(('travellerCategories', _params['traveller_categories']))
            _collection_formats['travellerCategories'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsJourneyDetailsJourneyDetailsApiModel",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '404': "MicrosoftAspNetCoreMvcProblemDetails",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/journeys/{detailsReference}/details', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def journeys_get(self, origin_gid : Annotated[Optional[StrictStr], Field(description="The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. '9021014001760000'), a stop point (e.g. '9022014001760004') or meta-station (e.g. '0000000800000022')).")] = None, origin_name : Annotated[Optional[StrictStr], Field(description="The name of the origin location. The maximum length allowed is 256 characters.")] = None, origin_latitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of the origin location.")] = None, origin_longitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of the origin location.")] = None, destination_gid : Annotated[Optional[StrictStr], Field(description="The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station).")] = None, destination_name : Annotated[Optional[StrictStr], Field(description="The name of the destination location. The maximum length allowed is 256 characters.")] = None, destination_latitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of the destination location.")] = None, destination_longitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of the destination location.")] = None, date_time : Annotated[Optional[datetime], Field(description="The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure.")] = None, date_time_relates_to : Annotated[Optional[VTApiPlaneraResaCoreModelsDateTimeRelatesToType], Field(description="Specifies if the datetime is related to the departure or arrival of the journey.")] = None, pagination_reference : Annotated[Optional[StrictStr], Field(description="Pagination reference from a previous search.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results.")] = None, transport_modes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyTransportMode)], Field(description="The transport modes to include when searching for journeys, if none specified all transport modes are included.")] = None, transport_sub_modes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode)], Field(description="The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode 'train'.")] = None, only_direct_connections : Annotated[Optional[StrictBool], Field(description="Only include direct connections, e.g. journeys with one trip leg.")] = None, include_nearby_stop_areas : Annotated[Optional[StrictBool], Field(description="Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area.")] = None, via_gid : Annotated[Optional[StrictInt], Field(description="The 16-digit Västtrafik gid of the via location (which must be a stop area).")] = None, origin_walk : Annotated[Optional[StrictStr], Field(description="Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).")] = None, dest_walk : Annotated[Optional[StrictStr], Field(description="Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).")] = None, origin_bike : Annotated[Optional[StrictStr], Field(description="Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).")] = None, dest_bike : Annotated[Optional[StrictStr], Field(description="Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).")] = None, total_bike : Annotated[Optional[StrictStr], Field(description="Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike=1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters).")] = None, origin_car : Annotated[Optional[StrictStr], Field(description="Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).")] = None, dest_car : Annotated[Optional[StrictStr], Field(description="Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).")] = None, origin_park : Annotated[Optional[StrictStr], Field(description="Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).")] = None, dest_park : Annotated[Optional[StrictStr], Field(description="Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).")] = None, interchange_duration_in_minutes : Annotated[Optional[StrictInt], Field(description="The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value.")] = None, include_occupancy : Annotated[Optional[StrictBool], Field(description="Includes occupancy in journey.")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse:  # noqa: E501
        """Returns journeys matching the specified search parameters.  # noqa: E501

        For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.    Sample request:        GET /journeys?originGid=9021014001760000&destinationGid=9021014003980000    or        GET /journeys?originName=Sadelsten,+V%C3%A5rg%C3%A5rda&originLongitude=12.63308&originLatitude=58.028237&destinationLongitude=11.930897&destinationLatitude=57.586085&destinationName=%C3%85sdammsstigen,+427+36+Billdal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_get(origin_gid, origin_name, origin_latitude, origin_longitude, destination_gid, destination_name, destination_latitude, destination_longitude, date_time, date_time_relates_to, pagination_reference, limit, transport_modes, transport_sub_modes, only_direct_connections, include_nearby_stop_areas, via_gid, origin_walk, dest_walk, origin_bike, dest_bike, total_bike, origin_car, dest_car, origin_park, dest_park, interchange_duration_in_minutes, include_occupancy, async_req=True)
        >>> result = thread.get()

        :param origin_gid: The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. '9021014001760000'), a stop point (e.g. '9022014001760004') or meta-station (e.g. '0000000800000022')).
        :type origin_gid: str
        :param origin_name: The name of the origin location. The maximum length allowed is 256 characters.
        :type origin_name: str
        :param origin_latitude: The latitude of the origin location.
        :type origin_latitude: float
        :param origin_longitude: The longitude of the origin location.
        :type origin_longitude: float
        :param destination_gid: The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station).
        :type destination_gid: str
        :param destination_name: The name of the destination location. The maximum length allowed is 256 characters.
        :type destination_name: str
        :param destination_latitude: The latitude of the destination location.
        :type destination_latitude: float
        :param destination_longitude: The longitude of the destination location.
        :type destination_longitude: float
        :param date_time: The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure.
        :type date_time: datetime
        :param date_time_relates_to: Specifies if the datetime is related to the departure or arrival of the journey.
        :type date_time_relates_to: VTApiPlaneraResaCoreModelsDateTimeRelatesToType
        :param pagination_reference: Pagination reference from a previous search.
        :type pagination_reference: str
        :param limit: The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results.
        :type limit: int
        :param transport_modes: The transport modes to include when searching for journeys, if none specified all transport modes are included.
        :type transport_modes: List[VTApiPlaneraResaWebV4ModelsJourneyTransportMode]
        :param transport_sub_modes: The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode 'train'.
        :type transport_sub_modes: List[VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode]
        :param only_direct_connections: Only include direct connections, e.g. journeys with one trip leg.
        :type only_direct_connections: bool
        :param include_nearby_stop_areas: Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area.
        :type include_nearby_stop_areas: bool
        :param via_gid: The 16-digit Västtrafik gid of the via location (which must be a stop area).
        :type via_gid: int
        :param origin_walk: Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).
        :type origin_walk: str
        :param dest_walk: Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).
        :type dest_walk: str
        :param origin_bike: Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).
        :type origin_bike: str
        :param dest_bike: Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).
        :type dest_bike: str
        :param total_bike: Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike=1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters).
        :type total_bike: str
        :param origin_car: Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).
        :type origin_car: str
        :param dest_car: Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).
        :type dest_car: str
        :param origin_park: Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).
        :type origin_park: str
        :param dest_park: Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).
        :type dest_park: str
        :param interchange_duration_in_minutes: The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value.
        :type interchange_duration_in_minutes: int
        :param include_occupancy: Includes occupancy in journey.
        :type include_occupancy: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the journeys_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.journeys_get_with_http_info(origin_gid, origin_name, origin_latitude, origin_longitude, destination_gid, destination_name, destination_latitude, destination_longitude, date_time, date_time_relates_to, pagination_reference, limit, transport_modes, transport_sub_modes, only_direct_connections, include_nearby_stop_areas, via_gid, origin_walk, dest_walk, origin_bike, dest_bike, total_bike, origin_car, dest_car, origin_park, dest_park, interchange_duration_in_minutes, include_occupancy, **kwargs)  # noqa: E501

    @validate_arguments
    def journeys_get_with_http_info(self, origin_gid : Annotated[Optional[StrictStr], Field(description="The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. '9021014001760000'), a stop point (e.g. '9022014001760004') or meta-station (e.g. '0000000800000022')).")] = None, origin_name : Annotated[Optional[StrictStr], Field(description="The name of the origin location. The maximum length allowed is 256 characters.")] = None, origin_latitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of the origin location.")] = None, origin_longitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of the origin location.")] = None, destination_gid : Annotated[Optional[StrictStr], Field(description="The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station).")] = None, destination_name : Annotated[Optional[StrictStr], Field(description="The name of the destination location. The maximum length allowed is 256 characters.")] = None, destination_latitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The latitude of the destination location.")] = None, destination_longitude : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The longitude of the destination location.")] = None, date_time : Annotated[Optional[datetime], Field(description="The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure.")] = None, date_time_relates_to : Annotated[Optional[VTApiPlaneraResaCoreModelsDateTimeRelatesToType], Field(description="Specifies if the datetime is related to the departure or arrival of the journey.")] = None, pagination_reference : Annotated[Optional[StrictStr], Field(description="Pagination reference from a previous search.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results.")] = None, transport_modes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyTransportMode)], Field(description="The transport modes to include when searching for journeys, if none specified all transport modes are included.")] = None, transport_sub_modes : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode)], Field(description="The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode 'train'.")] = None, only_direct_connections : Annotated[Optional[StrictBool], Field(description="Only include direct connections, e.g. journeys with one trip leg.")] = None, include_nearby_stop_areas : Annotated[Optional[StrictBool], Field(description="Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area.")] = None, via_gid : Annotated[Optional[StrictInt], Field(description="The 16-digit Västtrafik gid of the via location (which must be a stop area).")] = None, origin_walk : Annotated[Optional[StrictStr], Field(description="Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).")] = None, dest_walk : Annotated[Optional[StrictStr], Field(description="Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).")] = None, origin_bike : Annotated[Optional[StrictStr], Field(description="Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).")] = None, dest_bike : Annotated[Optional[StrictStr], Field(description="Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).")] = None, total_bike : Annotated[Optional[StrictStr], Field(description="Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike=1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters).")] = None, origin_car : Annotated[Optional[StrictStr], Field(description="Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).")] = None, dest_car : Annotated[Optional[StrictStr], Field(description="Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).")] = None, origin_park : Annotated[Optional[StrictStr], Field(description="Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).")] = None, dest_park : Annotated[Optional[StrictStr], Field(description="Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).")] = None, interchange_duration_in_minutes : Annotated[Optional[StrictInt], Field(description="The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value.")] = None, include_occupancy : Annotated[Optional[StrictBool], Field(description="Includes occupancy in journey.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns journeys matching the specified search parameters.  # noqa: E501

        For an origin or destination to be valid, either a gid or a combination of latitude and longitude must be specified. OriginName and destinationName are optional in combination with latitude and longitude.    Sample request:        GET /journeys?originGid=9021014001760000&destinationGid=9021014003980000    or        GET /journeys?originName=Sadelsten,+V%C3%A5rg%C3%A5rda&originLongitude=12.63308&originLatitude=58.028237&destinationLongitude=11.930897&destinationLatitude=57.586085&destinationName=%C3%85sdammsstigen,+427+36+Billdal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_get_with_http_info(origin_gid, origin_name, origin_latitude, origin_longitude, destination_gid, destination_name, destination_latitude, destination_longitude, date_time, date_time_relates_to, pagination_reference, limit, transport_modes, transport_sub_modes, only_direct_connections, include_nearby_stop_areas, via_gid, origin_walk, dest_walk, origin_bike, dest_bike, total_bike, origin_car, dest_car, origin_park, dest_park, interchange_duration_in_minutes, include_occupancy, async_req=True)
        >>> result = thread.get()

        :param origin_gid: The 16-digit Västtrafik gid of the origin location (which could be either a stop area (e.g. '9021014001760000'), a stop point (e.g. '9022014001760004') or meta-station (e.g. '0000000800000022')).
        :type origin_gid: str
        :param origin_name: The name of the origin location. The maximum length allowed is 256 characters.
        :type origin_name: str
        :param origin_latitude: The latitude of the origin location.
        :type origin_latitude: float
        :param origin_longitude: The longitude of the origin location.
        :type origin_longitude: float
        :param destination_gid: The 16-digit Västtrafik gid of the destination location (which could be either a stop area, stop point or meta-station).
        :type destination_gid: str
        :param destination_name: The name of the destination location. The maximum length allowed is 256 characters.
        :type destination_name: str
        :param destination_latitude: The latitude of the destination location.
        :type destination_latitude: float
        :param destination_longitude: The longitude of the destination location.
        :type destination_longitude: float
        :param date_time: The datetime for which to search journeys. Must be specified in RFC 3339 format or be null which means that the current time on the server is used. The related dateTimeRelatesTo parameter specifies if the time is related to the arrival or departure.
        :type date_time: datetime
        :param date_time_relates_to: Specifies if the datetime is related to the departure or arrival of the journey.
        :type date_time_relates_to: VTApiPlaneraResaCoreModelsDateTimeRelatesToType
        :param pagination_reference: Pagination reference from a previous search.
        :type pagination_reference: str
        :param limit: The number of results to return. Not guaranteed to return the specified number of results and usually not more than 7 results.
        :type limit: int
        :param transport_modes: The transport modes to include when searching for journeys, if none specified all transport modes are included.
        :type transport_modes: List[VTApiPlaneraResaWebV4ModelsJourneyTransportMode]
        :param transport_sub_modes: The transport sub modes to include when searching for journeys, if none specified all transport sub modes are included. Only supported in combination with transportMode 'train'.
        :type transport_sub_modes: List[VTApiPlaneraResaWebV4ModelsJourneyTransportSubMode]
        :param only_direct_connections: Only include direct connections, e.g. journeys with one trip leg.
        :type only_direct_connections: bool
        :param include_nearby_stop_areas: Includes nearby stop areas when searching for a journey to or from a stop area or stop point. This means that the search algorithm will take additional stop points of other stop areas nearby the given start and destination stop area into account. These additional stop points are reachable by walk. E.g when true a journey suggestion may include a departure access link (initial walking leg) to a stop point of a stop area close by the specified origin stop area.
        :type include_nearby_stop_areas: bool
        :param via_gid: The 16-digit Västtrafik gid of the via location (which must be a stop area).
        :type via_gid: int
        :param origin_walk: Enables/disables using footpaths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter originWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).
        :type origin_walk: str
        :param dest_walk: Enables/disables using footpaths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable walk with a minimum distance of 0 meters and a maximum distance of 3 kilometers, set the parameter destWalk=1,0,3000. If default distances should be used, skip the values, e.g 1,,. This will enable walk with the default minimum (0 meters) and the default maximum (2000 meters).
        :type dest_walk: str
        :param origin_bike: Enables/disables using bike paths in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter originBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).
        :type origin_bike: str
        :param dest_bike: Enables/disables using bike paths at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 1000 meters and a maximum distance of 5 kilometers, set the parameter destBike=1,1000,5000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (3000 meters).
        :type dest_bike: str
        :param total_bike: Enables/disables using bike routes for the whole trip. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable bike with a minimum distance of 0 meters and a maximum distance of 20 kilometers, set the parameter totalBike=1,0,20000. If default distances should be used, skip the values, e.g 1,,. This will enable bike with the default minimum (0 meters) and the default maximum (25000 meters).
        :type total_bike: str
        :param origin_car: Enables/disables using car in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter origincar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).
        :type origin_car: str
        :param dest_car: Enables/disables using car at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable car with a minimum distance of 2000 meters and a maximum distance of 7 kilometers, set the parameter destCar=1,2000,7000. If default distances should be used, skip the values, e.g 1,,. This will enable car with the default minimum (0 meters) and the default maximum (5000 meters).
        :type dest_car: str
        :param origin_park: Enables/disables using Park and Ride in the beginning of a trip when searching from an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter originPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).
        :type origin_park: str
        :param dest_park: Enables/disables using Park and Ride at the end of a trip when searching to an address. To fine-tune the minimum and/or maximum distance to the next public transport station, provide these values separated by comma. The values are expressed in meters. To enable Park and Ride with a minimum distance of 3000 meters and a maximum distance of 70 kilometers, set the parameter destPark=1,3000,70000. If default distances should be used, skip the values, e.g 1,,. This will enable Park and Ride with the default minimum (2000 meters) and the default maximum (50000 meters).
        :type dest_park: str
        :param interchange_duration_in_minutes: The minimum number of minutes between arrival and departure for a connection to be valid and the trip included in the search results, ignoring the default value.
        :type interchange_duration_in_minutes: int
        :param include_occupancy: Includes occupancy in journey.
        :type include_occupancy: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'origin_gid',
            'origin_name',
            'origin_latitude',
            'origin_longitude',
            'destination_gid',
            'destination_name',
            'destination_latitude',
            'destination_longitude',
            'date_time',
            'date_time_relates_to',
            'pagination_reference',
            'limit',
            'transport_modes',
            'transport_sub_modes',
            'only_direct_connections',
            'include_nearby_stop_areas',
            'via_gid',
            'origin_walk',
            'dest_walk',
            'origin_bike',
            'dest_bike',
            'total_bike',
            'origin_car',
            'dest_car',
            'origin_park',
            'dest_park',
            'interchange_duration_in_minutes',
            'include_occupancy'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journeys_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('origin_gid') is not None:  # noqa: E501
            _query_params.append(('originGid', _params['origin_gid']))

        if _params.get('origin_name') is not None:  # noqa: E501
            _query_params.append(('originName', _params['origin_name']))

        if _params.get('origin_latitude') is not None:  # noqa: E501
            _query_params.append(('originLatitude', _params['origin_latitude']))

        if _params.get('origin_longitude') is not None:  # noqa: E501
            _query_params.append(('originLongitude', _params['origin_longitude']))

        if _params.get('destination_gid') is not None:  # noqa: E501
            _query_params.append(('destinationGid', _params['destination_gid']))

        if _params.get('destination_name') is not None:  # noqa: E501
            _query_params.append(('destinationName', _params['destination_name']))

        if _params.get('destination_latitude') is not None:  # noqa: E501
            _query_params.append(('destinationLatitude', _params['destination_latitude']))

        if _params.get('destination_longitude') is not None:  # noqa: E501
            _query_params.append(('destinationLongitude', _params['destination_longitude']))

        if _params.get('date_time') is not None:  # noqa: E501
            if isinstance(_params['date_time'], datetime):
                _query_params.append(('dateTime', _params['date_time'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('dateTime', _params['date_time']))

        if _params.get('date_time_relates_to') is not None:  # noqa: E501
            _query_params.append(('dateTimeRelatesTo', _params['date_time_relates_to'].value))

        if _params.get('pagination_reference') is not None:  # noqa: E501
            _query_params.append(('paginationReference', _params['pagination_reference']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('transport_modes') is not None:  # noqa: E501
            _query_params.append(('transportModes', _params['transport_modes']))
            _collection_formats['transportModes'] = 'multi'

        if _params.get('transport_sub_modes') is not None:  # noqa: E501
            _query_params.append(('transportSubModes', _params['transport_sub_modes']))
            _collection_formats['transportSubModes'] = 'multi'

        if _params.get('only_direct_connections') is not None:  # noqa: E501
            _query_params.append(('onlyDirectConnections', _params['only_direct_connections']))

        if _params.get('include_nearby_stop_areas') is not None:  # noqa: E501
            _query_params.append(('includeNearbyStopAreas', _params['include_nearby_stop_areas']))

        if _params.get('via_gid') is not None:  # noqa: E501
            _query_params.append(('viaGid', _params['via_gid']))

        if _params.get('origin_walk') is not None:  # noqa: E501
            _query_params.append(('originWalk', _params['origin_walk']))

        if _params.get('dest_walk') is not None:  # noqa: E501
            _query_params.append(('destWalk', _params['dest_walk']))

        if _params.get('origin_bike') is not None:  # noqa: E501
            _query_params.append(('originBike', _params['origin_bike']))

        if _params.get('dest_bike') is not None:  # noqa: E501
            _query_params.append(('destBike', _params['dest_bike']))

        if _params.get('total_bike') is not None:  # noqa: E501
            _query_params.append(('totalBike', _params['total_bike']))

        if _params.get('origin_car') is not None:  # noqa: E501
            _query_params.append(('originCar', _params['origin_car']))

        if _params.get('dest_car') is not None:  # noqa: E501
            _query_params.append(('destCar', _params['dest_car']))

        if _params.get('origin_park') is not None:  # noqa: E501
            _query_params.append(('originPark', _params['origin_park']))

        if _params.get('dest_park') is not None:  # noqa: E501
            _query_params.append(('destPark', _params['dest_park']))

        if _params.get('interchange_duration_in_minutes') is not None:  # noqa: E501
            _query_params.append(('interchangeDurationInMinutes', _params['interchange_duration_in_minutes']))

        if _params.get('include_occupancy') is not None:  # noqa: E501
            _query_params.append(('includeOccupancy', _params['include_occupancy']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsJourneysGetJourneysResponse",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/journeys', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def journeys_reconstruct_get(self, ref : Annotated[StrictStr, Field(..., description="The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid.")], include_occupancy : Annotated[Optional[StrictBool], Field(description="Includes occupancy in journey.")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel:  # noqa: E501
        """Reconstructs a journey based on the given reconstruction reference, received from the search journeys query.  # noqa: E501

        Sample request:        GET /journeys/reconstruct?ref=¶HKI¶T$A=1@O=Brunnsparken, Göteborg@L=1760003@a=128@$A=1@O=Korsvägen, Göteborg@L=3980004@a=128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_reconstruct_get(ref, include_occupancy, async_req=True)
        >>> result = thread.get()

        :param ref: The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (required)
        :type ref: str
        :param include_occupancy: Includes occupancy in journey.
        :type include_occupancy: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the journeys_reconstruct_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.journeys_reconstruct_get_with_http_info(ref, include_occupancy, **kwargs)  # noqa: E501

    @validate_arguments
    def journeys_reconstruct_get_with_http_info(self, ref : Annotated[StrictStr, Field(..., description="The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid.")], include_occupancy : Annotated[Optional[StrictBool], Field(description="Includes occupancy in journey.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Reconstructs a journey based on the given reconstruction reference, received from the search journeys query.  # noqa: E501

        Sample request:        GET /journeys/reconstruct?ref=¶HKI¶T$A=1@O=Brunnsparken, Göteborg@L=1760003@a=128@$A=1@O=Korsvägen, Göteborg@L=3980004@a=128@$202206131358$202206131406$Spå    4$$1$$$$$$¶KRCC¶#VE#1#  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_reconstruct_get_with_http_info(ref, include_occupancy, async_req=True)
        >>> result = thread.get()

        :param ref: The reconstruction reference. A reconstructionReference is valid as long as the original journey search is valid. (required)
        :type ref: str
        :param include_occupancy: Includes occupancy in journey.
        :type include_occupancy: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ref',
            'include_occupancy'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journeys_reconstruct_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('ref') is not None:  # noqa: E501
            _query_params.append(('ref', _params['ref']))

        if _params.get('include_occupancy') is not None:  # noqa: E501
            _query_params.append(('includeOccupancy', _params['include_occupancy']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsJourneysJourneyApiModel",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '500': None,
            '503': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/journeys/reconstruct', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def journeys_valid_time_interval_get(self, **kwargs) -> VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel:  # noqa: E501
        """Returns a time interval for when journey data is available.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_valid_time_interval_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the journeys_valid_time_interval_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.journeys_valid_time_interval_get_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def journeys_valid_time_interval_get_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns a time interval for when journey data is available.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.journeys_valid_time_interval_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journeys_valid_time_interval_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsValidTimeIntervalApiModel",
            '404': "MicrosoftAspNetCoreMvcProblemDetails",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/journeys/valid-time-interval', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
