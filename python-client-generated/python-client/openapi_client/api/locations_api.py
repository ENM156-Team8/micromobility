# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr, conlist

from typing import Optional, Union

from openapi_client.models.vt_api_planera_resa_web_v4_models_location_by_coordinates_type import VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType
from openapi_client.models.vt_api_planera_resa_web_v4_models_location_by_text_type import VTApiPlaneraResaWebV4ModelsLocationByTextType
from openapi_client.models.vt_api_planera_resa_web_v4_models_locations_get_locations_response import VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class LocationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def locations_by_coordinates_get(self, latitude : Annotated[Union[StrictFloat, StrictInt], Field(..., description="The latitude.")], longitude : Annotated[Union[StrictFloat, StrictInt], Field(..., description="The longitude.")], radius_in_meters : Annotated[Optional[StrictInt], Field(description="The search radius from the coordinates specified in meters. Must be a positive integer > 0.")] = None, types : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType)], Field(description="The location types to include in the response, if none specified all locations types are included.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse:  # noqa: E501
        """Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.  # noqa: E501

        Sample request:        GET /locations/by-coordinates?latitude=57.708734&longitude=11.974764&radiusInMeters=500&limit=10&offset=0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.locations_by_coordinates_get(latitude, longitude, radius_in_meters, types, limit, offset, async_req=True)
        >>> result = thread.get()

        :param latitude: The latitude. (required)
        :type latitude: float
        :param longitude: The longitude. (required)
        :type longitude: float
        :param radius_in_meters: The search radius from the coordinates specified in meters. Must be a positive integer > 0.
        :type radius_in_meters: int
        :param types: The location types to include in the response, if none specified all locations types are included.
        :type types: List[VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType]
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the locations_by_coordinates_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.locations_by_coordinates_get_with_http_info(latitude, longitude, radius_in_meters, types, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def locations_by_coordinates_get_with_http_info(self, latitude : Annotated[Union[StrictFloat, StrictInt], Field(..., description="The latitude.")], longitude : Annotated[Union[StrictFloat, StrictInt], Field(..., description="The longitude.")], radius_in_meters : Annotated[Optional[StrictInt], Field(description="The search radius from the coordinates specified in meters. Must be a positive integer > 0.")] = None, types : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType)], Field(description="The location types to include in the response, if none specified all locations types are included.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.  # noqa: E501

        Sample request:        GET /locations/by-coordinates?latitude=57.708734&longitude=11.974764&radiusInMeters=500&limit=10&offset=0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.locations_by_coordinates_get_with_http_info(latitude, longitude, radius_in_meters, types, limit, offset, async_req=True)
        >>> result = thread.get()

        :param latitude: The latitude. (required)
        :type latitude: float
        :param longitude: The longitude. (required)
        :type longitude: float
        :param radius_in_meters: The search radius from the coordinates specified in meters. Must be a positive integer > 0.
        :type radius_in_meters: int
        :param types: The location types to include in the response, if none specified all locations types are included.
        :type types: List[VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType]
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'latitude',
            'longitude',
            'radius_in_meters',
            'types',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method locations_by_coordinates_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('latitude') is not None:  # noqa: E501
            _query_params.append(('latitude', _params['latitude']))

        if _params.get('longitude') is not None:  # noqa: E501
            _query_params.append(('longitude', _params['longitude']))

        if _params.get('radius_in_meters') is not None:  # noqa: E501
            _query_params.append(('radiusInMeters', _params['radius_in_meters']))

        if _params.get('types') is not None:  # noqa: E501
            _query_params.append(('types', _params['types']))
            _collection_formats['types'] = 'multi'

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/locations/by-coordinates', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def locations_by_text_get(self, q : Annotated[StrictStr, Field(..., description="The search text (e.g. 'brunn', 'cent' or 'Kungsgatan'). The maximum length allowed is 256 characters.")], types : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsLocationByTextType)], Field(description="The location types to include in the response, if none specified all locations types are included.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, **kwargs) -> VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse:  # noqa: E501
        """Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.  # noqa: E501

        Sample request:        GET /locations/by-text?q=brunnsparken&limit=10&offset=0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.locations_by_text_get(q, types, limit, offset, async_req=True)
        >>> result = thread.get()

        :param q: The search text (e.g. 'brunn', 'cent' or 'Kungsgatan'). The maximum length allowed is 256 characters. (required)
        :type q: str
        :param types: The location types to include in the response, if none specified all locations types are included.
        :type types: List[VTApiPlaneraResaWebV4ModelsLocationByTextType]
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the locations_by_text_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.locations_by_text_get_with_http_info(q, types, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def locations_by_text_get_with_http_info(self, q : Annotated[StrictStr, Field(..., description="The search text (e.g. 'brunn', 'cent' or 'Kungsgatan'). The maximum length allowed is 256 characters.")], types : Annotated[Optional[conlist(VTApiPlaneraResaWebV4ModelsLocationByTextType)], Field(description="The location types to include in the response, if none specified all locations types are included.")] = None, limit : Annotated[Optional[StrictInt], Field(description="The number of results to return.")] = None, offset : Annotated[Optional[StrictInt], Field(description="The zero-based start offset of the pagination.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.  # noqa: E501

        Sample request:        GET /locations/by-text?q=brunnsparken&limit=10&offset=0  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.locations_by_text_get_with_http_info(q, types, limit, offset, async_req=True)
        >>> result = thread.get()

        :param q: The search text (e.g. 'brunn', 'cent' or 'Kungsgatan'). The maximum length allowed is 256 characters. (required)
        :type q: str
        :param types: The location types to include in the response, if none specified all locations types are included.
        :type types: List[VTApiPlaneraResaWebV4ModelsLocationByTextType]
        :param limit: The number of results to return.
        :type limit: int
        :param offset: The zero-based start offset of the pagination.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'q',
            'types',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method locations_by_text_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('q') is not None:  # noqa: E501
            _query_params.append(('q', _params['q']))

        if _params.get('types') is not None:  # noqa: E501
            _query_params.append(('types', _params['types']))
            _collection_formats['types'] = 'multi'

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/locations/by-text', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
