# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr, conlist

from typing import List, Optional, Union

from openapi_client.models.vt_api_planera_resa_core_models_position_transport_mode import VTApiPlaneraResaCoreModelsPositionTransportMode
from openapi_client.models.vt_api_planera_resa_web_v4_models_positions_journey_position_api_model import VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PositionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def positions_get(self, lower_left_lat : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Lower left latitude of bounding box.")], lower_left_long : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Lower left longitude of bounding box.")], upper_right_lat : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Upper right latitude of bounding box.")], upper_right_long : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Upper right longitude of bounding box.")], transport_modes : Annotated[Optional[conlist(VTApiPlaneraResaCoreModelsPositionTransportMode)], Field(description="The transport modes to include when searching for journeys, if none specified all transport modes are included.")] = None, details_references : Annotated[Optional[conlist(StrictStr)], Field(description="Filter journeys by one or more journey details reference.")] = None, line_designations : Annotated[Optional[conlist(StrictStr)], Field(description="Only journeys running the given lineDesignations (case sensitive) are part of the result.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Maximum number of journeys in response. Range from 1 to 200. Defaults to 100")] = None, **kwargs) -> List[VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel]:  # noqa: E501
        """Returns journey positions within a bounding box  # noqa: E501

        Sample request:        GET /positions?lowerLeftLat=57.721723&lowerLeftLong=12.011882&upperRightLat=57.737549&upperRightLong=12.039268&limit=100  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.positions_get(lower_left_lat, lower_left_long, upper_right_lat, upper_right_long, transport_modes, details_references, line_designations, limit, async_req=True)
        >>> result = thread.get()

        :param lower_left_lat: Lower left latitude of bounding box. (required)
        :type lower_left_lat: float
        :param lower_left_long: Lower left longitude of bounding box. (required)
        :type lower_left_long: float
        :param upper_right_lat: Upper right latitude of bounding box. (required)
        :type upper_right_lat: float
        :param upper_right_long: Upper right longitude of bounding box. (required)
        :type upper_right_long: float
        :param transport_modes: The transport modes to include when searching for journeys, if none specified all transport modes are included.
        :type transport_modes: List[VTApiPlaneraResaCoreModelsPositionTransportMode]
        :param details_references: Filter journeys by one or more journey details reference.
        :type details_references: List[str]
        :param line_designations: Only journeys running the given lineDesignations (case sensitive) are part of the result.
        :type line_designations: List[str]
        :param limit: Maximum number of journeys in response. Range from 1 to 200. Defaults to 100
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the positions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.positions_get_with_http_info(lower_left_lat, lower_left_long, upper_right_lat, upper_right_long, transport_modes, details_references, line_designations, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def positions_get_with_http_info(self, lower_left_lat : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Lower left latitude of bounding box.")], lower_left_long : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Lower left longitude of bounding box.")], upper_right_lat : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Upper right latitude of bounding box.")], upper_right_long : Annotated[Union[StrictFloat, StrictInt], Field(..., description="Upper right longitude of bounding box.")], transport_modes : Annotated[Optional[conlist(VTApiPlaneraResaCoreModelsPositionTransportMode)], Field(description="The transport modes to include when searching for journeys, if none specified all transport modes are included.")] = None, details_references : Annotated[Optional[conlist(StrictStr)], Field(description="Filter journeys by one or more journey details reference.")] = None, line_designations : Annotated[Optional[conlist(StrictStr)], Field(description="Only journeys running the given lineDesignations (case sensitive) are part of the result.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Maximum number of journeys in response. Range from 1 to 200. Defaults to 100")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns journey positions within a bounding box  # noqa: E501

        Sample request:        GET /positions?lowerLeftLat=57.721723&lowerLeftLong=12.011882&upperRightLat=57.737549&upperRightLong=12.039268&limit=100  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.positions_get_with_http_info(lower_left_lat, lower_left_long, upper_right_lat, upper_right_long, transport_modes, details_references, line_designations, limit, async_req=True)
        >>> result = thread.get()

        :param lower_left_lat: Lower left latitude of bounding box. (required)
        :type lower_left_lat: float
        :param lower_left_long: Lower left longitude of bounding box. (required)
        :type lower_left_long: float
        :param upper_right_lat: Upper right latitude of bounding box. (required)
        :type upper_right_lat: float
        :param upper_right_long: Upper right longitude of bounding box. (required)
        :type upper_right_long: float
        :param transport_modes: The transport modes to include when searching for journeys, if none specified all transport modes are included.
        :type transport_modes: List[VTApiPlaneraResaCoreModelsPositionTransportMode]
        :param details_references: Filter journeys by one or more journey details reference.
        :type details_references: List[str]
        :param line_designations: Only journeys running the given lineDesignations (case sensitive) are part of the result.
        :type line_designations: List[str]
        :param limit: Maximum number of journeys in response. Range from 1 to 200. Defaults to 100
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'lower_left_lat',
            'lower_left_long',
            'upper_right_lat',
            'upper_right_long',
            'transport_modes',
            'details_references',
            'line_designations',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method positions_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('lower_left_lat') is not None:  # noqa: E501
            _query_params.append(('lowerLeftLat', _params['lower_left_lat']))

        if _params.get('lower_left_long') is not None:  # noqa: E501
            _query_params.append(('lowerLeftLong', _params['lower_left_long']))

        if _params.get('upper_right_lat') is not None:  # noqa: E501
            _query_params.append(('upperRightLat', _params['upper_right_lat']))

        if _params.get('upper_right_long') is not None:  # noqa: E501
            _query_params.append(('upperRightLong', _params['upper_right_long']))

        if _params.get('transport_modes') is not None:  # noqa: E501
            _query_params.append(('transportModes', _params['transport_modes']))
            _collection_formats['transportModes'] = 'multi'

        if _params.get('details_references') is not None:  # noqa: E501
            _query_params.append(('detailsReferences', _params['details_references']))
            _collection_formats['detailsReferences'] = 'multi'

        if _params.get('line_designations') is not None:  # noqa: E501
            _query_params.append(('lineDesignations', _params['line_designations']))
            _collection_formats['lineDesignations'] = 'multi'

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['auth']  # noqa: E501

        _response_types_map = {
            '200': "List[VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel]",
            '400': "VTApiPlaneraResaWebV4ModelsApiError",
            '500': None,
            '503': None,
        }

        return self.api_client.call_api(
            '/positions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
