# coding: utf-8

"""
    Planera Resa

    Sök och planera resor med Västtrafik

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.vt_api_planera_resa_web_v4_models_journeys_trip_leg_api_model import VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel  # noqa: E501

class TestVTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel(unittest.TestCase):
    """VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel:
        """Test VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel`
        """
        model = VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel()  # noqa: E501
        if include_optional:
            return VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel(
                origin = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/call_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.CallApiModel(
                    stop_point = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_point_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopPointApiModel(
                        gid = '0', 
                        name = '0', 
                        platform = '', 
                        latitude = 1.337, 
                        longitude = 1.337, 
                        stop_area = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_area_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopAreaApiModel(
                            gid = '', 
                            name = '', 
                            latitude = 1.337, 
                            longitude = 1.337, 
                            tariff_zone1 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), 
                            tariff_zone2 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), ), ), 
                    planned_time = '0', 
                    estimated_time = '', 
                    estimated_otherwise_planned_time = '', 
                    notes = [
                        openapi_client.models.vt/api_planera_resa/core/models/note.VT.ApiPlaneraResa.Core.Models.Note(
                            type = '', 
                            severity = 'unknown', 
                            text = '', )
                        ], ),
                destination = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/call_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.CallApiModel(
                    stop_point = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_point_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopPointApiModel(
                        gid = '0', 
                        name = '0', 
                        platform = '', 
                        latitude = 1.337, 
                        longitude = 1.337, 
                        stop_area = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_area_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopAreaApiModel(
                            gid = '', 
                            name = '', 
                            latitude = 1.337, 
                            longitude = 1.337, 
                            tariff_zone1 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), 
                            tariff_zone2 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), ), ), 
                    planned_time = '0', 
                    estimated_time = '', 
                    estimated_otherwise_planned_time = '', 
                    notes = [
                        openapi_client.models.vt/api_planera_resa/core/models/note.VT.ApiPlaneraResa.Core.Models.Note(
                            type = '', 
                            severity = 'unknown', 
                            text = '', )
                        ], ),
                is_cancelled = True,
                is_part_cancelled = True,
                service_journey = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/service_journey_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.ServiceJourneyApiModel(
                    gid = '0', 
                    direction = '', 
                    number = '', 
                    line = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/line_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.LineApiModel(
                        name = '', 
                        background_color = '', 
                        foreground_color = '', 
                        border_color = '', 
                        transport_mode = 'unknown', 
                        transport_sub_mode = 'unknown', 
                        short_name = '', 
                        designation = '', 
                        is_wheelchair_accessible = True, ), ),
                notes = [
                    openapi_client.models.vt/api_planera_resa/core/models/note.VT.ApiPlaneraResa.Core.Models.Note(
                        type = '', 
                        severity = 'unknown', 
                        text = '', )
                    ],
                estimated_distance_in_meters = 56,
                planned_connecting_time_in_minutes = 56,
                estimated_connecting_time_in_minutes = 56,
                is_risk_of_missing_connection = True,
                planned_departure_time = '',
                planned_arrival_time = '',
                planned_duration_in_minutes = 56,
                estimated_departure_time = '',
                estimated_arrival_time = '',
                estimated_duration_in_minutes = 56,
                estimated_otherwise_planned_arrival_time = '',
                estimated_otherwise_planned_departure_time = '',
                occupancy = openapi_client.models.vt/api_planera_resa/web/v4/models/occupancy_information_api_model.VT.ApiPlaneraResa.Web.V4.Models.OccupancyInformationApiModel(
                    level = 'low', 
                    source = 'prediction', ),
                journey_leg_index = 56
            )
        else:
            return VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel(
                origin = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/call_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.CallApiModel(
                    stop_point = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_point_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopPointApiModel(
                        gid = '0', 
                        name = '0', 
                        platform = '', 
                        latitude = 1.337, 
                        longitude = 1.337, 
                        stop_area = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_area_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopAreaApiModel(
                            gid = '', 
                            name = '', 
                            latitude = 1.337, 
                            longitude = 1.337, 
                            tariff_zone1 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), 
                            tariff_zone2 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), ), ), 
                    planned_time = '0', 
                    estimated_time = '', 
                    estimated_otherwise_planned_time = '', 
                    notes = [
                        openapi_client.models.vt/api_planera_resa/core/models/note.VT.ApiPlaneraResa.Core.Models.Note(
                            type = '', 
                            severity = 'unknown', 
                            text = '', )
                        ], ),
                destination = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/call_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.CallApiModel(
                    stop_point = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_point_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopPointApiModel(
                        gid = '0', 
                        name = '0', 
                        platform = '', 
                        latitude = 1.337, 
                        longitude = 1.337, 
                        stop_area = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/stop_area_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.StopAreaApiModel(
                            gid = '', 
                            name = '', 
                            latitude = 1.337, 
                            longitude = 1.337, 
                            tariff_zone1 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), 
                            tariff_zone2 = openapi_client.models.vt/api_planera_resa/web/v4/models/journeys/tariff_zone_api_model.VT.ApiPlaneraResa.Web.V4.Models.Journeys.TariffZoneApiModel(
                                gid = '', 
                                name = '', 
                                number = 56, 
                                short_name = '', ), ), ), 
                    planned_time = '0', 
                    estimated_time = '', 
                    estimated_otherwise_planned_time = '', 
                    notes = [
                        openapi_client.models.vt/api_planera_resa/core/models/note.VT.ApiPlaneraResa.Core.Models.Note(
                            type = '', 
                            severity = 'unknown', 
                            text = '', )
                        ], ),
                is_cancelled = True,
        )
        """

    def testVTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel(self):
        """Test VTApiPlaneraResaWebV4ModelsJourneysTripLegApiModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
